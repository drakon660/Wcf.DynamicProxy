//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SRServiceModel {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SRServiceModel() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.ServiceModel.Resources.SRServiceModel", typeof(SRServiceModel).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied..
        /// </summary>
        internal static string AccessDenied {
            get {
                return ResourceManager.GetString("AccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Binding is null..
        /// </summary>
        internal static string AChannelServiceEndpointSBindingIsNull0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSBindingIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Contract is null..
        /// </summary>
        internal static string AChannelServiceEndpointSContractIsNull0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSContractIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Contract&apos;s name is null or empty..
        /// </summary>
        internal static string AChannelServiceEndpointSContractSNameIsNull0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSContractSNameIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Contract&apos;s namespace is null..
        /// </summary>
        internal static string AChannelServiceEndpointSContractSNamespace0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSContractSNamespace0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityBoundary.
        /// </summary>
        internal static string ActivityBoundary {
            get {
                return ResourceManager.GetString("ActivityBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executing user callback..
        /// </summary>
        internal static string ActivityCallback {
            get {
                return ResourceManager.GetString("ActivityCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityClose {
            get {
                return ResourceManager.GetString("ActivityClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close ClientBase. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityCloseClientBase {
            get {
                return ResourceManager.GetString("ActivityCloseClientBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Construct ChannelFactory. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityConstructChannelFactory {
            get {
                return ResourceManager.GetString("ActivityConstructChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute &apos;{0}.{1}&apos;..
        /// </summary>
        internal static string ActivityExecuteMethod {
            get {
                return ResourceManager.GetString("ActivityExecuteMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityOpen {
            get {
                return ResourceManager.GetString("ActivityOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open ClientBase. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityOpenClientBase {
            get {
                return ResourceManager.GetString("ActivityOpenClientBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process action &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityProcessAction {
            get {
                return ResourceManager.GetString("ActivityProcessAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing10 ({0}).
        /// </summary>
        internal static string Addressing10ToStringFormat {
            get {
                return ResourceManager.GetString("Addressing10ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing200408 ({0}).
        /// </summary>
        internal static string Addressing200408ToStringFormat {
            get {
                return ResourceManager.GetString("Addressing200408ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element &apos;{0}&apos; in namespace &apos;{1}&apos; is not valid. This either means that element &apos;{0}&apos; is a duplicate element, or that it is not a legal extension because extension elements cannot be in the addressing namespace..
        /// </summary>
        internal static string AddressingExtensionInBadNS {
            get {
                return ResourceManager.GetString("AddressingExtensionInBadNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing Version &apos;{0}&apos; does not support adding WS-Addressing headers..
        /// </summary>
        internal static string AddressingHeadersCannotBeAddedToAddressingVersion {
            get {
                return ResourceManager.GetString("AddressingHeadersCannotBeAddedToAddressingVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AddressingNone ({0}).
        /// </summary>
        internal static string AddressingNoneToStringFormat {
            get {
                return ResourceManager.GetString("AddressingNoneToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing Version &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string AddressingVersionNotSupported {
            get {
                return ResourceManager.GetString("AddressingVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service does not allow you to log on anonymously..
        /// </summary>
        internal static string AnonymousLogonsAreNotAllowed {
            get {
                return ResourceManager.GetString("AnonymousLogonsAreNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument must be a non-empty string..
        /// </summary>
        internal static string ArgumentCannotBeEmptyString {
            get {
                return ResourceManager.GetString("ArgumentCannotBeEmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified argument was out of the range of valid values.  The value must be at least {0}..
        /// </summary>
        internal static string ArgumentOutOfMinRange {
            get {
                return ResourceManager.GetString("ArgumentOutOfMinRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value must be &gt;= {0} and &lt;= {1}..
        /// </summary>
        internal static string ArgumentOutOfRange {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}:{1} assertion is not supported..
        /// </summary>
        internal static string AssertionNotSupported {
            get {
                return ResourceManager.GetString("AssertionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsymmetricSecurityBindingElement cannot build a channel or listener factory. The InitiatorTokenParameters property is required but not set. Binding element configuration: {0}.
        /// </summary>
        internal static string AsymmetricSecurityBindingElementNeedsInitiatorTokenParameters {
            get {
                return ResourceManager.GetString("AsymmetricSecurityBindingElementNeedsInitiatorTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsymmetricSecurityBindingElement cannot build a channel or listener factory. The RecipientTokenParameters property is required but not set. Binding element configuration: {0}.
        /// </summary>
        internal static string AsymmetricSecurityBindingElementNeedsRecipientTokenParameters {
            get {
                return ResourceManager.GetString("AsymmetricSecurityBindingElementNeedsRecipientTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async End called on wrong channel..
        /// </summary>
        internal static string AsyncEndCalledOnWrongChannel {
            get {
                return ResourceManager.GetString("AsyncEndCalledOnWrongChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async End called with an IAsyncResult from a different Begin method..
        /// </summary>
        internal static string AsyncEndCalledWithAnIAsyncResult {
            get {
                return ResourceManager.GetString("AsyncEndCalledWithAnIAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one fault reason must be specified..
        /// </summary>
        internal static string AtLeastOneFaultReasonMustBeSpecified {
            get {
                return ResourceManager.GetString("AtLeastOneFaultReasonMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to get contract type for {0}, but that type is not a ServiceContract, nor does it inherit a ServiceContract..
        /// </summary>
        internal static string AttemptedToGetContractTypeForButThatTypeIs1 {
            get {
                return ResourceManager.GetString("AttemptedToGetContractTypeForButThatTypeIs1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authentication failed..
        /// </summary>
        internal static string AuthFailed {
            get {
                return ResourceManager.GetString("AuthFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EncryptedData or EncryptedKey is in an invalid state for this operation..
        /// </summary>
        internal static string BadEncryptionState {
            get {
                return ResourceManager.GetString("BadEncryptionState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issued token is of unexpected type &apos;{0}&apos;. Expected token type &apos;{1}&apos;..
        /// </summary>
        internal static string BadIssuedTokenType {
            get {
                return ResourceManager.GetString("BadIssuedTokenType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid key encryption algorithm {0}..
        /// </summary>
        internal static string BadKeyEncryptionAlgorithm {
            get {
                return ResourceManager.GetString("BadKeyEncryptionAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base address cannot contain a Uri fragment..
        /// </summary>
        internal static string BaseAddressCannotHaveFragment {
            get {
                return ResourceManager.GetString("BaseAddressCannotHaveFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base address cannot contain a Uri query string..
        /// </summary>
        internal static string BaseAddressCannotHaveQuery {
            get {
                return ResourceManager.GetString("BaseAddressCannotHaveQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base address cannot contain a Uri user info section..
        /// </summary>
        internal static string BaseAddressCannotHaveUserInfo {
            get {
                return ResourceManager.GetString("BaseAddressCannotHaveUserInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection already contains an address with scheme {0}.  There can be at most one address per scheme in this collection. If your service is being hosted in IIS you can fix the problem by setting &apos;system.serviceModel/serviceHostingEnvironment/multipleSiteBindingsEnabled&apos; to true or specifying &apos;system.serviceModel/serviceHostingEnvironment/baseAddressPrefixFilters&apos;..
        /// </summary>
        internal static string BaseAddressDuplicateScheme {
            get {
                return ResourceManager.GetString("BaseAddressDuplicateScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only an absolute Uri can be used as a base address..
        /// </summary>
        internal static string BaseAddressMustBeAbsolute {
            get {
                return ResourceManager.GetString("BaseAddressMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BasicHttp binding requires that BasicHttpBinding.Security.Message.ClientCredentialType be equivalent to the BasicHttpMessageCredentialType.Certificate credential type for secure messages. Select Transport or TransportWithMessageCredential security for UserName credentials..
        /// </summary>
        internal static string BasicHttpMessageSecurityRequiresCertificate {
            get {
                return ResourceManager.GetString("BasicHttpMessageSecurityRequiresCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bearer Key Type is not supported with WSFederationHttpBinding. Please use WS2007FederationHttpBinding..
        /// </summary>
        internal static string BearerKeyIncompatibleWithWSFederationHttpBinding {
            get {
                return ResourceManager.GetString("BearerKeyIncompatibleWithWSFederationHttpBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Proof Token was found in the response that was returned by the Security Token Service for a Bearer Key Type token request. Note that Proof Tokens should not be generated when a Bearer Key Type request is made..
        /// </summary>
        internal static string BearerKeyTypeCannotHaveProofKey {
            get {
                return ResourceManager.GetString("BearerKeyTypeCannotHaveProofKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service behavior {0} requires that the binding associated with endpoint {1} listening on {2} supports the context protocol, because the contract associated with this endpoint may require a session. Currently configured binding for this endpoint does not support the context protocol. Please modify the binding to add support for the context protocol or modify the SessionMode on the contract to NotAllowed..
        /// </summary>
        internal static string BehaviorRequiresContextProtocolSupportInBinding {
            get {
                return ResourceManager.GetString("BehaviorRequiresContextProtocolSupportInBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binary encoder session is not valid. There was an error decoding a previous message..
        /// </summary>
        internal static string BinaryEncoderSessionInvalid {
            get {
                return ResourceManager.GetString("BinaryEncoderSessionInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binary encoder session information is not properly formed..
        /// </summary>
        internal static string BinaryEncoderSessionMalformed {
            get {
                return ResourceManager.GetString("BinaryEncoderSessionMalformed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binary encoder session information exceeded the maximum size quota ({0}). To increase this quota, use the MaxSessionSize property on the BinaryMessageEncodingBindingElement..
        /// </summary>
        internal static string BinaryEncoderSessionTooLarge {
            get {
                return ResourceManager.GetString("BinaryEncoderSessionTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding &apos;{0}&apos; doesn&apos;t support creating any channel types. This often indicates that the BindingElements in a CustomBinding have been stacked incorrectly or in the wrong order. A Transport is required at the bottom of the stack. The recommended order for BindingElements is: TransactionFlow, ReliableSession, Security, CompositeDuplex, OneWay, StreamSecurity, MessageEncoding, Transport. .
        /// </summary>
        internal static string BindingDoesnTSupportAnyChannelTypes1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportAnyChannelTypes1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract does not allow Session, but Binding &apos;{0}&apos; does not support Datagram or is not configured properly to support it..
        /// </summary>
        internal static string BindingDoesntSupportDatagramButContractRequires {
            get {
                return ResourceManager.GetString("BindingDoesntSupportDatagramButContractRequires", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires Duplex, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportDuplexButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportDuplexButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires OneWay, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportOneWayButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportOneWayButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires Request/Reply, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportRequestReplyButContract1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportRequestReplyButContract1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires Session, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportSessionButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportSessionButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires TwoWay (either request-reply or duplex), but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportTwoWayButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportTwoWayButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body writer does not support writing more than once because it is not buffered..
        /// </summary>
        internal static string BodyWriterCanOnlyBeWrittenOnce {
            get {
                return ResourceManager.GetString("BodyWriterCanOnlyBeWrittenOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body writer returned from OnCreateBufferedCopy was not buffered..
        /// </summary>
        internal static string BodyWriterReturnedIsNotBuffered {
            get {
                return ResourceManager.GetString("BodyWriterReturnedIsNotBuffered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to finish reading Base64 data as the given buffer quota has been exceeded. Buffer quota: {0}. Consider increasing the MaxReceivedMessageSize quota on the TransportBindingElement. Please note that a very high value for MaxReceivedMessageSize will result in buffering a large message and might open the system to DOS attacks..
        /// </summary>
        internal static string BufferQuotaExceededReadingBase64 {
            get {
                return ResourceManager.GetString("BufferQuotaExceededReadingBase64", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item cannot be added. The maximum cache size is ({0} items)..
        /// </summary>
        internal static string CacheQuotaReached {
            get {
                return ResourceManager.GetString("CacheQuotaReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add two items with the same key to SynchronizedKeyedCollection..
        /// </summary>
        internal static string CannotAddTwoItemsWithTheSameKeyToSynchronizedKeyedCollection0 {
            get {
                return ResourceManager.GetString("CannotAddTwoItemsWithTheSameKeyToSynchronizedKeyedCollection0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot detect WS-Addressing version. EndpointReference does not start with an Element..
        /// </summary>
        internal static string CannotDetectAddressingVersion {
            get {
                return ResourceManager.GetString("CannotDetectAddressingVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client cannot determine the Service Principal Name based on the identity in the target address &apos;{0}&apos; for the purpose of SspiNegotiation/Kerberos. The target address identity must be a UPN identity (like acmedomain\\alice) or SPN identity (like host/bobs-machine)..
        /// </summary>
        internal static string CannotDetermineSPNBasedOnAddress {
            get {
                return ResourceManager.GetString("CannotDetermineSPNBasedOnAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the X.509 certificate using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos;..
        /// </summary>
        internal static string CannotFindCert {
            get {
                return ResourceManager.GetString("CannotFindCert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find The X.509 certificate using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos; for target &apos;{4}&apos;..
        /// </summary>
        internal static string CannotFindCertForTarget {
            get {
                return ResourceManager.GetString("CannotFindCertForTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}.{1} operation references a message element [{2}] that has already been exported from the {3}.{4} operation. You can change the name of one of the operations by changing the method name or using the Name property of OperationContractAttribute. Alternatively, you can control the element name in greater detail using the MessageContract programming model..
        /// </summary>
        internal static string CannotHaveTwoOperationsWithTheSameElement5 {
            get {
                return ResourceManager.GetString("CannotHaveTwoOperationsWithTheSameElement5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot have two operations in the same contract with the same name, methods {0} and {1} in type {2} violate this rule. You can change the name of one of the operations by changing the method name or by using the Name property of OperationContractAttribute..
        /// </summary>
        internal static string CannotHaveTwoOperationsWithTheSameName3 {
            get {
                return ResourceManager.GetString("CannotHaveTwoOperationsWithTheSameName3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PrivacyNotice element must have a Version attribute..
        /// </summary>
        internal static string CannotImportPrivacyNoticeElementWithoutVersionAttribute {
            get {
                return ResourceManager.GetString("CannotImportPrivacyNoticeElementWithoutVersionAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy to import a process cannot import a binding for contract ({0},{1}). The protection requirements for the binding are not compatible with a binding already imported for the contract. You must reconfigure the binding..
        /// </summary>
        internal static string CannotImportProtectionLevelForContract {
            get {
                return ResourceManager.GetString("CannotImportProtectionLevelForContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security policy import failed. The security policy contains supporting token requirements at the operation scope. The contract description does not specify the action for the request message associated with this operation..
        /// </summary>
        internal static string CannotImportSupportingTokensForOperationWithoutRequestAction {
            get {
                return ResourceManager.GetString("CannotImportSupportingTokensForOperationWithoutRequestAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot inherit two different operations with the same name, operation &apos;{0}&apos; from contracts &apos;{1}&apos; and &apos;{2}&apos; violate this rule. You can change the name of one of the operations by changing the method name or by using the Name property of OperationContractAttribute..
        /// </summary>
        internal static string CannotInheritTwoOperationsWithTheSameName3 {
            get {
                return ResourceManager.GetString("CannotInheritTwoOperationsWithTheSameName3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read the token from the &apos;{0}&apos; element with the &apos;{1}&apos; namespace for BinarySecretSecurityToken, with a &apos;{2}&apos; ValueType. If this element is expected to be valid, ensure that security is configured to consume tokens with the name, namespace and value type specified..
        /// </summary>
        internal static string CannotReadToken {
            get {
                return ResourceManager.GetString("CannotReadToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token authenticator &apos;{0}&apos; cannot validate a token of type &apos;{1}&apos;..
        /// </summary>
        internal static string CannotValidateSecurityTokenType {
            get {
                return ResourceManager.GetString("CannotValidateSecurityTokenType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create channel for a contract that requires request/reply and a binding that requires manual addressing but only supports duplex communication..
        /// </summary>
        internal static string CantCreateChannelWithManualAddressing {
            get {
                return ResourceManager.GetString("CantCreateChannelWithManualAddressing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t infer an external reference for &apos;{0}&apos; token type..
        /// </summary>
        internal static string CantInferReferenceForToken {
            get {
                return ResourceManager.GetString("CantInferReferenceForToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate-based client authentication is not supported in TransportCredentialOnly security mode. Select the Transport security mode..
        /// </summary>
        internal static string CertificateUnsupportedForHttpTransportCredentialOnly {
            get {
                return ResourceManager.GetString("CertificateUnsupportedForHttpTransportCredentialOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding does not contain a ChannelDemuxerBindingElement..
        /// </summary>
        internal static string ChannelDemuxerBindingElementNotFound {
            get {
                return ResourceManager.GetString("ChannelDemuxerBindingElementNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current channel does not support closing the output session as this channel does not implement ISessionChannel&lt;IDuplexSession&gt;..
        /// </summary>
        internal static string channelDoesNotHaveADuplexSession0 {
            get {
                return ResourceManager.GetString("channelDoesNotHaveADuplexSession0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call to IChannelFactory.CreateChannel made on an object of type {0} failed because Open has not been called on this object..
        /// </summary>
        internal static string ChannelFactoryCannotBeUsedToCreateChannels {
            get {
                return ResourceManager.GetString("ChannelFactoryCannotBeUsedToCreateChannels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A newly accepted connection did not receive initialization data from the sender within the configured ChannelInitializationTimeout ({0}).  As a result, the connection will be aborted.  If you are on a highly congested network, or your sending machine is heavily loaded, consider increasing this value or load-balancing your server..
        /// </summary>
        internal static string ChannelInitializationTimeout {
            get {
                return ResourceManager.GetString("ChannelInitializationTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: The InnerChannel property is null..
        /// </summary>
        internal static string channelIsNotAvailable0 {
            get {
                return ResourceManager.GetString("channelIsNotAvailable0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot modify channel parameters because the {0} is in the {1} state.  This operation is only supported in the Created state..
        /// </summary>
        internal static string ChannelParametersCannotBeModified {
            get {
                return ResourceManager.GetString("ChannelParametersCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot propagate channel parameters because the {0} is in the {1} state.  This operation is only supported in the Opening or Opened state when the collection is locked..
        /// </summary>
        internal static string ChannelParametersCannotBePropagated {
            get {
                return ResourceManager.GetString("ChannelParametersCannotBePropagated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified channel type {0} is not supported by this channel manager..
        /// </summary>
        internal static string ChannelTypeNotSupported {
            get {
                return ResourceManager.GetString("ChannelTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML element {0} does not have a child of type {1}..
        /// </summary>
        internal static string ChildNodeTypeMissing {
            get {
                return ResourceManager.GetString("ChildNodeTypeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The claimType cannot be an empty string..
        /// </summary>
        internal static string ClaimTypeCannotBeEmpty {
            get {
                return ResourceManager.GetString("ClaimTypeCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate for the client has not been provided.  The certificate can be set on the ClientCredentials or ServiceCredentials..
        /// </summary>
        internal static string ClientCertificateNotProvided {
            get {
                return ResourceManager.GetString("ClientCertificateNotProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client certificate is not provided. Specify a client certificate in ClientCredentials. .
        /// </summary>
        internal static string ClientCertificateNotProvidedOnClientCredentials {
            get {
                return ResourceManager.GetString("ClientCertificateNotProvidedOnClientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClientCredentials cannot create a local token provider for token requirement {0}..
        /// </summary>
        internal static string ClientCredentialsUnableToCreateLocalTokenProvider {
            get {
                return ResourceManager.GetString("ClientCredentialsUnableToCreateLocalTokenProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClientCredentialType.None is not valid for the TransportWithMessageCredential security mode. Specify a message credential type or use a different security mode..
        /// </summary>
        internal static string ClientCredentialTypeMustBeSpecifiedForMixedMode {
            get {
                return ResourceManager.GetString("ClientCredentialTypeMustBeSpecifiedForMixedMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ClientOperation &apos;{0}&apos; requires Formatter, since SerializeRequest and DeserializeReply are not both false..
        /// </summary>
        internal static string ClientRuntimeRequiresFormatter0 {
            get {
                return ResourceManager.GetString("ClientRuntimeRequiresFormatter0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when creating the WebSocket with the factory of type &apos;{0}&apos;. See the inner exception for details..
        /// </summary>
        internal static string ClientWebSocketFactory_CreateWebSocketFailed {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_CreateWebSocketFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WebSocket returned by the factory of type &apos;{0}&apos; has the SubProtocol &apos;{1}&apos; that doesn&apos;t match the requested SubProtocol value &apos;{2}&apos;..
        /// </summary>
        internal static string ClientWebSocketFactory_InvalidSubProtocol {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_InvalidSubProtocol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket creation failed. The &apos;{0}&apos; returned a WebSocket that is either null or not opened..
        /// </summary>
        internal static string ClientWebSocketFactory_InvalidWebSocket {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_InvalidWebSocket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clone() was not implemented properly by &apos;{0}&apos;. The cloned object was &apos;{1}&apos;..
        /// </summary>
        internal static string CloneNotImplementedCorrectly {
            get {
                return ResourceManager.GetString("CloneNotImplementedCorrectly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close timed out after {0}.  Increase the timeout value passed to the call to Close or increase the CloseTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string CloseTimedOut {
            get {
                return ResourceManager.GetString("CloseTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be used for communication because it has been Aborted..
        /// </summary>
        internal static string CommunicationObjectAborted1 {
            get {
                return ResourceManager.GetString("CommunicationObjectAborted1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, has overridden the virtual function {1} but it does not call version defined in the base class..
        /// </summary>
        internal static string CommunicationObjectBaseClassMethodNotCalled {
            get {
                return ResourceManager.GetString("CommunicationObjectBaseClassMethodNotCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be modified unless it is in the Created state..
        /// </summary>
        internal static string CommunicationObjectCannotBeModified {
            get {
                return ResourceManager.GetString("CommunicationObjectCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be modified while it is in the {1} state..
        /// </summary>
        internal static string CommunicationObjectCannotBeModifiedInState {
            get {
                return ResourceManager.GetString("CommunicationObjectCannotBeModifiedInState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, is in the {1} state.  Communication objects cannot be used for communication unless they are in the Opened state..
        /// </summary>
        internal static string CommunicationObjectCannotBeUsed {
            get {
                return ResourceManager.GetString("CommunicationObjectCannotBeUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be used for communication because it is in the Faulted state..
        /// </summary>
        internal static string CommunicationObjectFaulted1 {
            get {
                return ResourceManager.GetString("CommunicationObjectFaulted1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, is not part of WCF and is in an unsupported state &apos;{1}&apos;.  This indicates an internal error in the implementation of that communication object..
        /// </summary>
        internal static string CommunicationObjectInInvalidState {
            get {
                return ResourceManager.GetString("CommunicationObjectInInvalidState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {1} binding does not have a configured binding named &apos;{0}&apos;..
        /// </summary>
        internal static string ConfigInvalidBindingConfigurationName {
            get {
                return ResourceManager.GetString("ConfigInvalidBindingConfigurationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid transaction protocol.  Valid values are &apos;OleTransactions&apos;, &apos;WSAtomicTransactionOctober2004&apos;, and &apos;WSAtomicTransaction11&apos;..
        /// </summary>
        internal static string ConfigInvalidTransactionFlowProtocolValue {
            get {
                return ResourceManager.GetString("ConfigInvalidTransactionFlowProtocolValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration files are not supported..
        /// </summary>
        internal static string ConfigurationFilesNotSupported {
            get {
                return ResourceManager.GetString("ConfigurationFilesNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl schema that was used to create this configuration file contained a &apos;RequireIssuerSerialReference&apos; assertion for a X509Token.  This can not be represented in configuration, you will need to programatically adjust the appropriate X509SecurityTokenParameters.X509KeyIdentifierClauseType to X509KeyIdentifierClauseType.IssuerSerial.  The default of X509KeyIdentifierClauseType.Thumbprint will be used, which may cause interop issues..
        /// </summary>
        internal static string ConfigurationSchemaContainsX509IssuerSerialReference {
            get {
                return ResourceManager.GetString("ConfigurationSchemaContainsX509IssuerSerialReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration schema is insufficient to describe the non-standard configuration of the following security binding element: .
        /// </summary>
        internal static string ConfigurationSchemaInsuffientForSecurityBindingElementInstance {
            get {
                return ResourceManager.GetString("ConfigurationSchemaInsuffientForSecurityBindingElementInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Type {0} was sent to a service expecting {1}.  The client and service bindings may be mismatched..
        /// </summary>
        internal static string ContentTypeMismatch {
            get {
                return ResourceManager.GetString("ContentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElement cannot provide channel factory for the requested channel shape {0}..
        /// </summary>
        internal static string ContextBindingElementCannotProvideChannelFactory {
            get {
                return ResourceManager.GetString("ContextBindingElementCannotProvideChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElement cannot provide channel listener for the requested channel shape {0}..
        /// </summary>
        internal static string ContextBindingElementCannotProvideChannelListener {
            get {
                return ResourceManager.GetString("ContextBindingElementCannotProvideChannelListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract &apos;{0}&apos; is not self-consistent -- it has one or more IsTerminating or non-IsInitiating operations, but it does not have the SessionMode property set to SessionMode.Required.  The IsInitiating and IsTerminating attributes can only be used in the context of a session..
        /// </summary>
        internal static string ContractIsNotSelfConsistentItHasOneOrMore2 {
            get {
                return ResourceManager.GetString("ContractIsNotSelfConsistentItHasOneOrMore2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation contract &apos;{0}&apos; is not self-consistent. When the &apos;{1}&apos; is set to &apos;{2}&apos;, both &apos;{3}&apos; and &apos;{4}&apos; properties must be true, and the operation must not have any input parameters..
        /// </summary>
        internal static string ContractIsNotSelfConsistentWhenIsSessionOpenNotificationEnabled {
            get {
                return ResourceManager.GetString("ContractIsNotSelfConsistentWhenIsSessionOpenNotificationEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to copy the HTTP header &apos;{0}&apos; with value &apos;{1}&apos; to &apos;{2}&apos;..
        /// </summary>
        internal static string CopyHttpHeaderFailed {
            get {
                return ResourceManager.GetString("CopyHttpHeaderFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no namespace binding for prefix &apos;{0}&apos; in scope..
        /// </summary>
        internal static string CouldNotFindNamespaceForPrefix {
            get {
                return ResourceManager.GetString("CouldNotFindNamespaceForPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channel type &apos;{1}&apos; was requested, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string CouldnTCreateChannelForChannelType2 {
            get {
                return ResourceManager.GetString("CouldnTCreateChannelForChannelType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channel requirements cannot be met by the ChannelFactory for Binding &apos;{0}&apos; since the contract requires support for one of these channel types &apos;{1}&apos; but the binding doesn&apos;t support any of them..
        /// </summary>
        internal static string CouldnTCreateChannelForType2 {
            get {
                return ResourceManager.GetString("CouldnTCreateChannelForType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t find required attribute of type {0} on {1}..
        /// </summary>
        internal static string couldnTFindRequiredAttributeOfTypeOn2 {
            get {
                return ResourceManager.GetString("couldnTFindRequiredAttributeOfTypeOn2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creation time must be before expiration time..
        /// </summary>
        internal static string CreationTimeUtcIsAfterExpiryTime {
            get {
                return ResourceManager.GetString("CreationTimeUtcIsAfterExpiryTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NTLM authentication scheme was specified, but the target credential does not allow NTLM..
        /// </summary>
        internal static string CredentialDisallowsNtlm {
            get {
                return ResourceManager.GetString("CredentialDisallowsNtlm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding &apos;{0}&apos; lacks a TransportBindingElement.  Every binding must have a binding element that derives from TransportBindingElement. This binding element must appear last in the BindingElementCollection..
        /// </summary>
        internal static string CustomBindingRequiresTransport {
            get {
                return ResourceManager.GetString("CustomBindingRequiresTransport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Default).
        /// </summary>
        internal static string Default {
            get {
                return ResourceManager.GetString("Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; list created by the Func &apos;{1}&apos; is invalid because it contains one or more null items..
        /// </summary>
        internal static string DelegatingHandlerArrayFromFuncContainsNullItem {
            get {
                return ResourceManager.GetString("DelegatingHandlerArrayFromFuncContainsNullItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; list is invalid because the property &apos;{1}&apos; of &apos;{2}&apos; is not null..
        /// </summary>
        internal static string DelegatingHandlerArrayHasNonNullInnerHandler {
            get {
                return ResourceManager.GetString("DelegatingHandlerArrayHasNonNullInnerHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-RM policy under the namespace {0} requires the wsrmp:ExactlyOnce, wsrmp:AtLeastOnce, or wsrmp:AtMostOnce assertion. The {1} element under the {2} namespace was found..
        /// </summary>
        internal static string DeliveryAssuranceRequired {
            get {
                return ResourceManager.GetString("DeliveryAssuranceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-RM policy under the namespace {0} requires the wsrmp:ExactlyOnce, wsrmp:AtLeastOnce, or wsrmp:AtMostOnce assertion. Nothing was found..
        /// </summary>
        internal static string DeliveryAssuranceRequiredNothingFound {
            get {
                return ResourceManager.GetString("DeliveryAssuranceRequiredNothingFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received derived key token has a invalid generation value specified. Value: {0}. The value should be greater than or equal to zero..
        /// </summary>
        internal static string DerivedKeyInvalidGenerationSpecified {
            get {
                return ResourceManager.GetString("DerivedKeyInvalidGenerationSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received derived key token has a invalid offset value specified. Value: {0}. The value should be greater than or equal to zero..
        /// </summary>
        internal static string DerivedKeyInvalidOffsetSpecified {
            get {
                return ResourceManager.GetString("DerivedKeyInvalidOffsetSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The derived key has not been computed for the security token..
        /// </summary>
        internal static string DerivedKeyNotInitialized {
            get {
                return ResourceManager.GetString("DerivedKeyNotInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The derived key&apos;s generation (&apos;{0}&apos;) and length (&apos;{1}&apos; bytes) result in a key derivation offset that is greater than the maximum offset (&apos;{2}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenGenerationAndLengthTooHigh {
            get {
                return ResourceManager.GetString("DerivedKeyTokenGenerationAndLengthTooHigh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length (&apos;{0}&apos; bytes) of the derived key&apos;s Label exceeds the maximum length (&apos;{1}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenLabelTooLong {
            get {
                return ResourceManager.GetString("DerivedKeyTokenLabelTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length (&apos;{0}&apos; bytes) of the derived key&apos;s Nonce exceeds the maximum length (&apos;{1}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenNonceTooLong {
            get {
                return ResourceManager.GetString("DerivedKeyTokenNonceTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The derived key&apos;s Offset (&apos;{0}&apos; bytes) exceeds the maximum offset (&apos;{1}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenOffsetTooHigh {
            get {
                return ResourceManager.GetString("DerivedKeyTokenOffsetTooHigh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DerivedKeyToken requires a reference to a token..
        /// </summary>
        internal static string DerivedKeyTokenRequiresTokenReference {
            get {
                return ResourceManager.GetString("DerivedKeyTokenRequiresTokenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DispatchOperation &apos;{0}&apos; requires Formatter, since DeserializeRequest and SerializeReply are not both false..
        /// </summary>
        internal static string DispatchRuntimeRequiresFormatter0 {
            get {
                return ResourceManager.GetString("DispatchRuntimeRequiresFormatter0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity check failed for incoming message. The expected DNS identity of the remote endpoint was &apos;{0}&apos; but the remote endpoint provided DNS claim &apos;{1}&apos;. If this is a legitimate remote endpoint, you can fix the problem by explicitly specifying DNS identity &apos;{1}&apos; as the Identity property of EndpointAddress when creating channel proxy. .
        /// </summary>
        internal static string DnsIdentityCheckFailedForIncomingMessage {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForIncomingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Identity check failed for the incoming message. The remote endpoint did not provide a domain name system (DNS) claim and therefore did not satisfied DNS identity &apos;{0}&apos;. This may be caused by lack of DNS or CN name in the remote endpoint X.509 certificate&apos;s distinguished name..
        /// </summary>
        internal static string DnsIdentityCheckFailedForIncomingMessageLackOfDnsClaim {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForIncomingMessageLackOfDnsClaim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity check failed for outgoing message. The expected DNS identity of the remote endpoint was &apos;{0}&apos; but the remote endpoint provided DNS claim &apos;{1}&apos;. If this is a legitimate remote endpoint, you can fix the problem by explicitly specifying DNS identity &apos;{1}&apos; as the Identity property of EndpointAddress when creating channel proxy. .
        /// </summary>
        internal static string DnsIdentityCheckFailedForOutgoingMessage {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForOutgoingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Identity check failed for the outgoing message. The remote endpoint did not provide a domain name system (DNS) claim and therefore did not satisfied DNS identity &apos;{0}&apos;. This may be caused by lack of DNS or CN name in the remote endpoint X.509 certificate&apos;s distinguished name..
        /// </summary>
        internal static string DnsIdentityCheckFailedForOutgoingMessageLackOfDnsClaim {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForOutgoingMessageLackOfDnsClaim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No DNS entries exist for host {0}..
        /// </summary>
        internal static string DnsResolveFailed {
            get {
                return ResourceManager.GetString("DnsResolveFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot map Windows user &apos;{0}&apos; to a UserPrincipalName that can be used for S4U impersonation..
        /// </summary>
        internal static string DownlevelNameCannotMapToUpn {
            get {
                return ResourceManager.GetString("DownlevelNameCannotMapToUpn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplex channel to {0} was aborted during the open process..
        /// </summary>
        internal static string DuplexChannelAbortedDuringOpen {
            get {
                return ResourceManager.GetString("DuplexChannelAbortedDuringOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value could not be added to the collection, as the collection already contains an item of the same type: &apos;{0}&apos;. This collection only supports one instance of each type..
        /// </summary>
        internal static string DuplicateBehavior1 {
            get {
                return ResourceManager.GetString("DuplicateBehavior1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate contract XmlQualifiedNames are not supported.\r\nAnother ContractDescription with the Name: {0} and Namespace: {1} has already been exported..
        /// </summary>
        internal static string DuplicateContractQNameNameOnExport {
            get {
                return ResourceManager.GetString("DuplicateContractQNameNameOnExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property with the name &apos;{0}&apos; already exists..
        /// </summary>
        internal static string DuplicateMessageProperty {
            get {
                return ResourceManager.GetString("DuplicateMessageProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy document was ignored because a policy expression with that ID has already been imported.\r\nPolicy ID:{0}.
        /// </summary>
        internal static string DuplicatePolicyDocumentSkipped {
            get {
                return ResourceManager.GetString("DuplicatePolicyDocumentSkipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy expression was ignored because another policy expression with that ID has already been read in this document.\r\nXPath:{0}.
        /// </summary>
        internal static string DuplicatePolicyInWsdlSkipped {
            get {
                return ResourceManager.GetString("DuplicatePolicyInWsdlSkipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The valid from time is greater than the valid to time..
        /// </summary>
        internal static string EffectiveGreaterThanExpiration {
            get {
                return ResourceManager.GetString("EffectiveGreaterThanExpiration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}:{1} element requires a {2}:{3} child element but has the {4} child element under the {5} namespace..
        /// </summary>
        internal static string ElementFound {
            get {
                return ResourceManager.GetString("ElementFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}:{1} element requires a {2}:{3} child element but has no child elements..
        /// </summary>
        internal static string ElementRequired {
            get {
                return ResourceManager.GetString("ElementRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty value was found for the required base-64 attribute name &apos;{0}&apos;, namespace &apos;{1}&apos;..
        /// </summary>
        internal static string EmptyBase64Attribute {
            get {
                return ResourceManager.GetString("EmptyBase64Attribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element {0} cannot be empty..
        /// </summary>
        internal static string EmptyXmlElementError {
            get {
                return ResourceManager.GetString("EmptyXmlElementError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process contentType..
        /// </summary>
        internal static string EncoderBadContentType {
            get {
                return ResourceManager.GetString("EncoderBadContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The envelope version of the incoming message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the expected messages..
        /// </summary>
        internal static string EncoderEnvelopeVersionMismatch {
            get {
                return ResourceManager.GetString("EncoderEnvelopeVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message version of the outgoing message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the message..
        /// </summary>
        internal static string EncoderMessageVersionMismatch {
            get {
                return ResourceManager.GetString("EncoderMessageVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized charSet &apos;{0}&apos; in contentType..
        /// </summary>
        internal static string EncoderUnrecognizedCharSet {
            get {
                return ResourceManager.GetString("EncoderUnrecognizedCharSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized contentType ({0}). Expected: {1}..
        /// </summary>
        internal static string EncoderUnrecognizedContentType {
            get {
                return ResourceManager.GetString("EncoderUnrecognizedContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to obtain XmlDictionaryReaderQuotas from the Binding. If you have specified a custom EncodingBindingElement, verify that the EncodingBindingElement can handle XmlDictionaryReaderQuotas in its GetProperty&lt;T&gt;() method..
        /// </summary>
        internal static string EncodingBindingElementDoesNotHandleReaderQuotas {
            get {
                return ResourceManager.GetString("EncodingBindingElementDoesNotHandleReaderQuotas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EncryptedKey clause was not wrapped with the required encryption token &apos;{0}&apos;..
        /// </summary>
        internal static string EncryptedKeyWasNotEncryptedWithTheRequiredEncryptingToken {
            get {
                return ResourceManager.GetString("EncryptedKeyWasNotEncryptedWithTheRequiredEncryptingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using the IAsyncResult design pattern, the End method cannot be decorated with OperationContractAttribute. Only the corresponding Begin method can be decorated with OperationContractAttribute; that attribute will apply to the Begin-End pair of methods. Method &apos;{0}&apos; in type &apos;{1}&apos; violates this..
        /// </summary>
        internal static string EndMethodsCannotBeDecoratedWithOperationContractAttribute {
            get {
                return ResourceManager.GetString("EndMethodsCannotBeDecoratedWithOperationContractAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChannelDispatcher requirements cannot be met by the IChannelListener for Binding &apos;{0}&apos; since the contract requires support for one of these channel types &apos;{1}&apos; but the binding only supports these channel types &apos;{2}&apos;..
        /// </summary>
        internal static string EndpointListenerRequirementsCannotBeMetBy3 {
            get {
                return ResourceManager.GetString("EndpointListenerRequirementsCannotBeMetBy3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no endpoint listening at {0} that could accept the message. This is often caused by an incorrect address or SOAP action. See InnerException, if present, for more details..
        /// </summary>
        internal static string EndpointNotFound {
            get {
                return ResourceManager.GetString("EndpointNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceEndpoint with name &apos;{0}&apos; could not be exported to WSDL because the Binding property is null. To fix this, set the Binding property to a valid Binding instance..
        /// </summary>
        internal static string EndpointsMustHaveAValidBinding1 {
            get {
                return ResourceManager.GetString("EndpointsMustHaveAValidBinding1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer cannot provide a computed key in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeCannotHaveComputedKey {
            get {
                return ResourceManager.GetString("EntropyModeCannotHaveComputedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer cannot provide key entropy or a proof token in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeCannotHaveProofTokenOrIssuerEntropy {
            get {
                return ResourceManager.GetString("EntropyModeCannotHaveProofTokenOrIssuerEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client cannot provide key entropy in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeCannotHaveRequestorEntropy {
            get {
                return ResourceManager.GetString("EntropyModeCannotHaveRequestorEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer must provide a computed key in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresComputedKey {
            get {
                return ResourceManager.GetString("EntropyModeRequiresComputedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer must provide key entropy in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresIssuerEntropy {
            get {
                return ResourceManager.GetString("EntropyModeRequiresIssuerEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer must provide a proof token in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresProofToken {
            get {
                return ResourceManager.GetString("EntropyModeRequiresProofToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client must provide key entropy in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresRequestorEntropy {
            get {
                return ResourceManager.GetString("EntropyModeRequiresRequestorEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EnvelopeNone ({0}).
        /// </summary>
        internal static string EnvelopeNoneToStringFormat {
            get {
                return ResourceManager.GetString("EnvelopeNoneToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Envelope Version &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string EnvelopeVersionNotSupported {
            get {
                return ResourceManager.GetString("EnvelopeVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized envelope version: {0}..
        /// </summary>
        internal static string EnvelopeVersionUnknown {
            get {
                return ResourceManager.GetString("EnvelopeVersionUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error creating the security key identifier clause from the security token XML. Please see the inner exception for more details..
        /// </summary>
        internal static string ErrorDeserializingKeyIdentifierClauseFromTokenXml {
            get {
                return ResourceManager.GetString("ErrorDeserializingKeyIdentifierClauseFromTokenXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error deserializing the security token XML. Please see the inner exception for more details..
        /// </summary>
        internal static string ErrorDeserializingTokenXml {
            get {
                return ResourceManager.GetString("ErrorDeserializingTokenXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing metadata from issuer &apos;{0}&apos; failed with error &apos;{1}&apos;..
        /// </summary>
        internal static string ErrorImportingIssuerMetadata {
            get {
                return ResourceManager.GetString("ErrorImportingIssuerMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in line {0} position {1}..
        /// </summary>
        internal static string ErrorInLine {
            get {
                return ResourceManager.GetString("ErrorInLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error serializing the security token. Please see the inner exception for more details..
        /// </summary>
        internal static string ErrorSerializingSecurityToken {
            get {
                return ResourceManager.GetString("ErrorSerializingSecurityToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy expression was not fully imported because it exceeded the maximum allowable complexity. The import stopped at element &apos;{0}&apos; &apos;{1}&apos;..
        /// </summary>
        internal static string ExceededMaxPolicyComplexity {
            get {
                return ResourceManager.GetString("ExceededMaxPolicyComplexity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy expression was not fully imported because its normalized form was too large..
        /// </summary>
        internal static string ExceededMaxPolicySize {
            get {
                return ResourceManager.GetString("ExceededMaxPolicySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element &apos;{0}&apos; with namespace &apos;{1}&apos; not found..
        /// </summary>
        internal static string ExpectedElementMissing {
            get {
                return ResourceManager.GetString("ExpectedElementMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected element &apos;{0}&apos; or element &apos;{1}&apos; (from namespace &apos;{2}&apos;)..
        /// </summary>
        internal static string ExpectedOneOfTwoElementsFromNamespace {
            get {
                return ResourceManager.GetString("ExpectedOneOfTwoElementsFromNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security policy export failed. The binding contains a TransportSecurityBindingElement but no transport binding element that implements ITransportTokenAssertionProvider. Policy export for such a binding is not supported. Make sure the transport binding element in the binding implements the ITransportTokenAssertionProvider interface..
        /// </summary>
        internal static string ExportOfBindingWithTransportSecurityBindingElementAndNoTransportSecurityNotSupported {
            get {
                return ResourceManager.GetString("ExportOfBindingWithTransportSecurityBindingElementAndNoTransportSecurityNotSuppor" +
                        "ted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extended protection is not supported on this platform.  Please install the appropriate patch or change the ExtendedProtectionPolicy on the Binding or BindingElement to a value with a PolicyEnforcement value of \&quot;Never\&quot; or \&quot;WhenSupported\&quot;..
        /// </summary>
        internal static string ExtendedProtectionNotSupported {
            get {
                return ResourceManager.GetString("ExtendedProtectionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional XML content is present in the fault detail element. Only a single element is allowed..
        /// </summary>
        internal static string ExtraContentIsPresentInFaultDetail {
            get {
                return ResourceManager.GetString("ExtraContentIsPresentInFaultDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to create a typed proxy for type &apos;{0}&apos;.
        /// </summary>
        internal static string FailedToCreateTypedProxy {
            get {
                return ResourceManager.GetString("FailedToCreateTypedProxy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned false from OnTryCreateException, but returned a non-null Exception (See InnerException for details)..
        /// </summary>
        internal static string FaultConverterCreatedException {
            get {
                return ResourceManager.GetString("FaultConverterCreatedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned false from OnTryCreateFaultMessage, but returned a non-null fault message..
        /// </summary>
        internal static string FaultConverterCreatedFaultMessage {
            get {
                return ResourceManager.GetString("FaultConverterCreatedFaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned true from OnTryCreateException, but did not return an Exception..
        /// </summary>
        internal static string FaultConverterDidNotCreateException {
            get {
                return ResourceManager.GetString("FaultConverterDidNotCreateException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned true from OnTryCreateFaultMessage, but did not return a fault message..
        /// </summary>
        internal static string FaultConverterDidNotCreateFaultMessage {
            get {
                return ResourceManager.GetString("FaultConverterDidNotCreateFaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fault does not have detail information..
        /// </summary>
        internal static string FaultDoesNotHaveAnyDetail {
            get {
                return ResourceManager.GetString("FaultDoesNotHaveAnyDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found multiple X.509 certificates using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos;. Provide a more specific find value..
        /// </summary>
        internal static string FoundMultipleCerts {
            get {
                return ResourceManager.GetString("FoundMultipleCerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found multiple X.509 certificates using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos; for target &apos;{4}&apos;. Provide a more specific find value..
        /// </summary>
        internal static string FoundMultipleCertsForTarget {
            get {
                return ResourceManager.GetString("FoundMultipleCertsForTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to decode a value after the framing stream was ended..
        /// </summary>
        internal static string FramingAtEnd {
            get {
                return ResourceManager.GetString("FramingAtEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Type {0} was not supported by service {1}.  The client and service bindings may be mismatched..
        /// </summary>
        internal static string FramingContentTypeMismatch {
            get {
                return ResourceManager.GetString("FramingContentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing content type size ({0}) exceeds the quota..
        /// </summary>
        internal static string FramingContentTypeTooLong {
            get {
                return ResourceManager.GetString("FramingContentTypeTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content type &apos;{0}&apos; is too long to be processed by the remote host. See the server logs for more details..
        /// </summary>
        internal static string FramingContentTypeTooLongFault {
            get {
                return ResourceManager.GetString("FramingContentTypeTooLongFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while reading message framing format at position {0} of stream (state: {1}).
        /// </summary>
        internal static string FramingError {
            get {
                return ResourceManager.GetString("FramingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing fault size ({0}) exceeds the quota..
        /// </summary>
        internal static string FramingFaultTooLong {
            get {
                return ResourceManager.GetString("FramingFaultTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server faulted with code &apos;{0}&apos;..
        /// </summary>
        internal static string FramingFaultUnrecognized {
            get {
                return ResourceManager.GetString("FramingFaultUnrecognized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message size quota for incoming messages has been exceeded for the remote channel. See the server logs for more details..
        /// </summary>
        internal static string FramingMaxMessageSizeExceeded {
            get {
                return ResourceManager.GetString("FramingMaxMessageSizeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Framing mode {0} is not supported..
        /// </summary>
        internal static string FramingModeNotSupported {
            get {
                return ResourceManager.GetString("FramingModeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .Net Framing mode being used is not supported by &apos;{0}&apos;. See the server logs for more details..
        /// </summary>
        internal static string FramingModeNotSupportedFault {
            get {
                return ResourceManager.GetString("FramingModeNotSupportedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More data was expected, but EOF was reached..
        /// </summary>
        internal static string FramingPrematureEOF {
            get {
                return ResourceManager.GetString("FramingPrematureEOF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected record type &apos;{0}&apos;, found &apos;{1}&apos;..
        /// </summary>
        internal static string FramingRecordTypeMismatch {
            get {
                return ResourceManager.GetString("FramingRecordTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified size is too large for this implementation..
        /// </summary>
        internal static string FramingSizeTooLarge {
            get {
                return ResourceManager.GetString("FramingSizeTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested upgrade is not supported by &apos;{0}&apos;. This could be due to mismatched bindings (for example security enabled on the client and not on the server)..
        /// </summary>
        internal static string FramingUpgradeInvalid {
            get {
                return ResourceManager.GetString("FramingUpgradeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value cannot be accessed because it has not yet been fully decoded..
        /// </summary>
        internal static string FramingValueNotAvailable {
            get {
                return ResourceManager.GetString("FramingValueNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Framing major version {0} is not supported..
        /// </summary>
        internal static string FramingVersionNotSupported {
            get {
                return ResourceManager.GetString("FramingVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .Net Framing version being used is not supported by &apos;{0}&apos;. See the server logs for more details..
        /// </summary>
        internal static string FramingVersionNotSupportedFault {
            get {
                return ResourceManager.GetString("FramingVersionNotSupportedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing via ({0}) is not a valid URI..
        /// </summary>
        internal static string FramingViaNotUri {
            get {
                return ResourceManager.GetString("FramingViaNotUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing via size ({0}) exceeds the quota..
        /// </summary>
        internal static string FramingViaTooLong {
            get {
                return ResourceManager.GetString("FramingViaTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Via &apos;{0}&apos; is too long to be processed by the remote host. See the server logs for more details..
        /// </summary>
        internal static string FramingViaTooLongFault {
            get {
                return ResourceManager.GetString("FramingViaTooLongFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error verifying some XML Schemas generated during export:\r\n{0}.
        /// </summary>
        internal static string GeneralSchemaValidationError {
            get {
                return ResourceManager.GetString("GeneralSchemaValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GenericCallbackException.
        /// </summary>
        internal static string GenericCallbackException {
            get {
                return ResourceManager.GetString("GenericCallbackException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message header with name &apos;{0}&apos; and namespace &apos;{1}&apos; is not present in the set of understood headers..
        /// </summary>
        internal static string HeaderAlreadyNotUnderstood {
            get {
                return ResourceManager.GetString("HeaderAlreadyNotUnderstood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message header with name &apos;{0}&apos; and namespace &apos;{1}&apos; is already present in the set of understood headers..
        /// </summary>
        internal static string HeaderAlreadyUnderstood {
            get {
                return ResourceManager.GetString("HeaderAlreadyUnderstood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is not a header with name {0} and namespace {1} in the message..
        /// </summary>
        internal static string HeaderNotFound {
            get {
                return ResourceManager.GetString("HeaderNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Envelope Version &apos;{0}&apos; does not support adding Message Headers..
        /// </summary>
        internal static string HeadersCannotBeAddedToEnvelopeVersion {
            get {
                return ResourceManager.GetString("HeadersCannotBeAddedToEnvelopeVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested service, &apos;{0}&apos; could not be activated. See the server&apos;s diagnostic trace logs for more information..
        /// </summary>
        internal static string Hosting_ServiceActivationFailed {
            get {
                return ResourceManager.GetString("Hosting_ServiceActivationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message contains a SOAP header representing the WS-Addressing &apos;{0}&apos;, yet the HTTP transport is configured with AddressingVersion.None.  As a result, the message is being dropped.  If this is not desired, then update your HTTP binding to support a different AddressingVersion..
        /// </summary>
        internal static string HttpAddressingNoneHeaderOnWire {
            get {
                return ResourceManager.GetString("HttpAddressingNoneHeaderOnWire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP request streaming cannot be used in conjunction with HTTP authentication.  Either disable request streaming or specify anonymous HTTP authentication..
        /// </summary>
        internal static string HttpAuthDoesNotSupportRequestStreaming {
            get {
                return ResourceManager.GetString("HttpAuthDoesNotSupportRequestStreaming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request is unauthorized with client authentication scheme &apos;{0}&apos;. The authentication header received from the server was &apos;{1}&apos;..
        /// </summary>
        internal static string HttpAuthorizationFailed {
            get {
                return ResourceManager.GetString("HttpAuthorizationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request was forbidden with client authentication scheme &apos;{0}&apos;..
        /// </summary>
        internal static string HttpAuthorizationForbidden {
            get {
                return ResourceManager.GetString("HttpAuthorizationForbidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value specified for the AuthenticationScheme property on the HttpTransportBindingElement (&apos;{0}&apos;) is not allowed when building a ChannelFactory. If you used a standard binding, ensure the ClientCredentialType is not set to HttpClientCredentialType.InheritedFromHost, a value which is invalid on a client. If you set the value to &apos;{0}&apos; directly on the HttpTransportBindingElement, please set it to Digest, Negotiate, NTLM, Basic, or Anonymous..
        /// </summary>
        internal static string HttpAuthSchemeCannotBeNone {
            get {
                return ResourceManager.GetString("HttpAuthSchemeCannotBeNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClientCredentialType &apos;{0}&apos; can only be used on the server side, not the client side. Please use one of the following values instead &apos;None, Basic, Client, Digest, Ntlm, Windows&apos;..
        /// </summary>
        internal static string HttpClientCredentialTypeInvalid {
            get {
                return ResourceManager.GetString("HttpClientCredentialTypeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of bytes available is inconsistent with the HTTP Content-Length header.  There may have been a network error or the client may be sending invalid requests..
        /// </summary>
        internal static string HttpContentLengthIncorrect {
            get {
                return ResourceManager.GetString("HttpContentLengthIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error ({0}) occurred while parsing the content type of the HTTP request. The content type was: {1}..
        /// </summary>
        internal static string HttpContentTypeFormatException {
            get {
                return ResourceManager.GetString("HttpContentTypeFormatException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An HTTP Content-Type header is required for SOAP messaging and none was found..
        /// </summary>
        internal static string HttpContentTypeHeaderRequired {
            get {
                return ResourceManager.GetString("HttpContentTypeHeaderRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElement of binding {0}:{1} is configured with ContextExchangeMode.HttpCookie but the configuration of this binding&apos;s HttpTransportBindingElement prevents upper channel layers from managing cookies. Please set the HttpTransportBindingElement.AllowCookies property to false or change the ContextExchangeMechanism of ContextBindingElement to SoapHeader..
        /// </summary>
        internal static string HttpCookieContextExchangeMechanismNotCompatibleWithTransportCookieSetting {
            get {
                return ResourceManager.GetString("HttpCookieContextExchangeMechanismNotCompatibleWithTransportCookieSetting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding {1}:{2} is configured with ContextExchangeMechanism.HttpCookie which is not compatible with the transport type {0}. Please modify the ContextExchangeMechanism or use HTTP or HTTPS transport..
        /// </summary>
        internal static string HttpCookieContextExchangeMechanismNotCompatibleWithTransportType {
            get {
                return ResourceManager.GetString("HttpCookieContextExchangeMechanismNotCompatibleWithTransportType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value specified, &apos;{0}&apos;, for the If-Modified-Since header does not parse into a valid date. Check the property value and ensure that it is of the proper format..
        /// </summary>
        internal static string HttpIfModifiedSinceParseError {
            get {
                return ResourceManager.GetString("HttpIfModifiedSinceParseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of MaxPendingAccepts should not be larger than {0}..
        /// </summary>
        internal static string HttpMaxPendingAcceptsTooLargeError {
            get {
                return ResourceManager.GetString("HttpMaxPendingAcceptsTooLargeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid type: &apos;{0}&apos;. It must inherit from base type &apos;{1}&apos;, cannot be abstract, and must expose a public default constructor..
        /// </summary>
        internal static string HttpMessageHandlerTypeNotSupported {
            get {
                return ResourceManager.GetString("HttpMessageHandlerTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{0}&apos; is not supported when building a ChannelFactory. The property value must be null when calling BuildChannelFactory..
        /// </summary>
        internal static string HttpPipelineNotSupportedOnClientSide {
            get {
                return ResourceManager.GetString("HttpPipelineNotSupportedOnClientSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while receiving the HTTP response to {0}. This could be due to the service endpoint binding not using the HTTP protocol. This could also be due to an HTTP request context being aborted by the server (possibly due to the service shutting down). See server logs for more details..
        /// </summary>
        internal static string HttpReceiveFailure {
            get {
                return ResourceManager.GetString("HttpReceiveFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request to &apos;{0}&apos; has exceeded the allotted timeout of {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string HttpRequestTimedOut {
            get {
                return ResourceManager.GetString("HttpRequestTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; authentication scheme has been specified on the HTTP factory. However, the factory only supports specification of exactly one authentication scheme. Valid authentication schemes are Digest, Negotiate, NTLM, Basic, or Anonymous..
        /// </summary>
        internal static string HttpRequiresSingleAuthScheme {
            get {
                return ResourceManager.GetString("HttpRequiresSingleAuthScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request to &apos;{0}&apos; has exceeded the allotted timeout of {1} while reading the response. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string HttpResponseTimedOut {
            get {
                return ResourceManager.GetString("HttpResponseTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP service located at {0} is unavailable.  This could be because the service is too busy or because no endpoint was found listening at the specified address. Please ensure that the address is correct and try accessing the service again later..
        /// </summary>
        internal static string HttpServerTooBusy {
            get {
                return ResourceManager.GetString("HttpServerTooBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SOAP action specified on the message, &apos;{0}&apos;, does not match the action specified on the HttpRequestMessageProperty, &apos;{1}&apos;..
        /// </summary>
        internal static string HttpSoapActionMismatch {
            get {
                return ResourceManager.GetString("HttpSoapActionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SOAP action specified on the message, &apos;{0}&apos;, does not match the action specified in the content-type of the HttpRequestMessageProperty, &apos;{1}&apos;..
        /// </summary>
        internal static string HttpSoapActionMismatchContentType {
            get {
                return ResourceManager.GetString("HttpSoapActionMismatchContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server certificate with name &apos;{0}&apos; failed identity verification because its thumbprint (&apos;{1}&apos;) does not match the one specified in the endpoint identity (&apos;{2}&apos;).  As a result, the current HTTPS request has failed.  Please update the endpoint identity used on the client or the certificate used by the server..
        /// </summary>
        internal static string HttpsServerCertThumbprintMismatch {
            get {
                return ResourceManager.GetString("HttpsServerCertThumbprintMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding specified requires that the to and via URIs must match because the Addressing Version is set to None. The to URI specified was &apos;{0}&apos;. The via URI specified was &apos;{1}&apos;..
        /// </summary>
        internal static string HttpToMustEqualVia {
            get {
                return ResourceManager.GetString("HttpToMustEqualVia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy being imported for contract &apos;{0}:{1}&apos; contains multiple HTTP authentication scheme assertions.  Since at most one such assertion is allowed, policy import has failed.  This may be resolved by updating the policy to contain no more than one HTTP authentication scheme assertion..
        /// </summary>
        internal static string HttpTransportCannotHaveMultipleAuthenticationSchemes {
            get {
                return ResourceManager.GetString("HttpTransportCannotHaveMultipleAuthenticationSchemes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID0023: Failed to create an instance of &apos;{0}&apos; from configuration. A custom configuration element was specified, but the method LoadCustomConfiguration was not implemented. Override LoadCustomConfiguration to handle custom configuration loading..
        /// </summary>
        internal static string ID0023 {
            get {
                return ResourceManager.GetString("ID0023", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identity check failed for the incoming message. The expected identity is &apos;{0}&apos; for the &apos;{1}&apos; target endpoint..
        /// </summary>
        internal static string IdentityCheckFailedForIncomingMessage {
            get {
                return ResourceManager.GetString("IdentityCheckFailedForIncomingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identity check failed for the outgoing message. The expected identity is &apos;{0}&apos; for the &apos;{1}&apos; target endpoint..
        /// </summary>
        internal static string IdentityCheckFailedForOutgoingMessage {
            get {
                return ResourceManager.GetString("IdentityCheckFailedForOutgoingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring invalid part in wsdl:message name=&apos;{0}&apos; from targetNamespace=&apos;{1}&apos;. Reason: {2}.
        /// </summary>
        internal static string IgnoreMessagePart3 {
            get {
                return ResourceManager.GetString("IgnoreMessagePart3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring invalid SOAP fault extension in wsdl:operation name=&apos;{0}&apos; from targetNamespace=&apos;{1}&apos;. Reason: {2}.
        /// </summary>
        internal static string IgnoreSoapFaultBinding3 {
            get {
                return ResourceManager.GetString("IgnoreSoapFaultBinding3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring invalid SOAP header extension in wsdl:operation name=&apos;{0}&apos; from targetNamespace=&apos;{1}&apos;. Reason: {2}.
        /// </summary>
        internal static string IgnoreSoapHeaderBinding3 {
            get {
                return ResourceManager.GetString("IgnoreSoapHeaderBinding3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication modes using Kerberos do not support the impersonation level &apos;{0}&apos;. Specify identification or impersonation..
        /// </summary>
        internal static string ImpersonationLevelNotSupported {
            get {
                return ResourceManager.GetString("ImpersonationLevelNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because base ServiceContract &apos;{0}&apos; has a CallbackContract &apos;{1}&apos;, derived ServiceContract &apos;{2}&apos; must also specify either &apos;{1}&apos; or a derived type as its CallbackContract..
        /// </summary>
        internal static string InAContractInheritanceHierarchyIfParentHasCallbackChildMustToo {
            get {
                return ResourceManager.GetString("InAContractInheritanceHierarchyIfParentHasCallbackChildMustToo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In a contract inheritance hierarchy, the ServiceContract&apos;s CallbackContract must be a subtype of the CallbackContracts of all of the CallbackContracts of the ServiceContracts inherited by the original ServiceContract, Types {0} and {1} violate this rule..
        /// </summary>
        internal static string InAContractInheritanceHierarchyTheServiceContract3_2 {
            get {
                return ResourceManager.GetString("InAContractInheritanceHierarchyTheServiceContract3_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incoming binary negotiation has invalid ValueType {0}..
        /// </summary>
        internal static string IncorrectBinaryNegotiationValueType {
            get {
                return ResourceManager.GetString("IncorrectBinaryNegotiationValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open ChannelFactory as the inner channel factory was not set during the initialization process..
        /// </summary>
        internal static string InnerChannelFactoryWasNotSet {
            get {
                return ResourceManager.GetString("InnerChannelFactoryWasNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input handler list cannot be empty..
        /// </summary>
        internal static string InputTypeListEmptyError {
            get {
                return ResourceManager.GetString("InputTypeListEmptyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient memory avaliable to complete the operation..
        /// </summary>
        internal static string InsufficentMemory {
            get {
                return ResourceManager.GetString("InsufficentMemory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error has occurred..
        /// </summary>
        internal static string InternalError {
            get {
                return ResourceManager.GetString("InternalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid async Begin method signature for method {0} in ServiceContract type {1}. Your begin method must take an AsyncCallback and an object as the last two arguments and return an IAsyncResult..
        /// </summary>
        internal static string InvalidAsyncBeginMethodSignatureForMethod2 {
            get {
                return ResourceManager.GetString("InvalidAsyncBeginMethodSignatureForMethod2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid async End method signature for method {0} in ServiceContract type {1}. Your end method must take an IAsyncResult as the last argument..
        /// </summary>
        internal static string InvalidAsyncEndMethodSignatureForMethod2 {
            get {
                return ResourceManager.GetString("InvalidAsyncEndMethodSignatureForMethod2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expecting all chars - c - of id to be in set [Char.IsLetter(c), Char.IsNumber(c), &apos;.&apos;, &apos;_&apos;, &apos;-&apos;], found &apos;{0}&apos;..
        /// </summary>
        internal static string InValidateId {
            get {
                return ResourceManager.GetString("InValidateId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expecting first char - c - to be in set [Char.IsLetter(c) &amp;&amp; c == &apos;_&apos;], found &apos;{0}&apos;..
        /// </summary>
        internal static string InValidateIdPrefix {
            get {
                return ResourceManager.GetString("InValidateIdPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransportBindingElement of type &apos;{0}&apos; in this CustomBinding returned a null or empty string for the Scheme. TransportBindingElement&apos;s Scheme must be a non-empty string..
        /// </summary>
        internal static string InvalidBindingScheme {
            get {
                return ResourceManager.GetString("InvalidBindingScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid decoder state machine..
        /// </summary>
        internal static string InvalidDecoderStateMachine {
            get {
                return ResourceManager.GetString("InvalidDecoderStateMachine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
        /// </summary>
        internal static string InvalidEnumArgument {
            get {
                return ResourceManager.GetString("InvalidEnumArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected internal enum value: {0}..
        /// </summary>
        internal static string InvalidEnumValue {
            get {
                return ResourceManager.GetString("InvalidEnumValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read the Identity element. The Identity type is not supported or the Identity element is empty..
        /// </summary>
        internal static string InvalidIdentityElement {
            get {
                return ResourceManager.GetString("InvalidIdentityElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key length &apos;{0}&apos; requested is invalid..
        /// </summary>
        internal static string InvalidKeyLengthRequested {
            get {
                return ResourceManager.GetString("InvalidKeyLengthRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred. Invalid MessageState..
        /// </summary>
        internal static string InvalidMessageState {
            get {
                return ResourceManager.GetString("InvalidMessageState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The QName is invalid..
        /// </summary>
        internal static string InvalidQName {
            get {
                return ResourceManager.GetString("InvalidQName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XmlReader used for the body of the message must be positioned on an element..
        /// </summary>
        internal static string InvalidReaderPositionOnCreateMessage {
            get {
                return ResourceManager.GetString("InvalidReaderPositionOnCreateMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token provider of type &apos;{0}&apos; did not return a token of type &apos;{1}&apos;. Check the credential configuration..
        /// </summary>
        internal static string InvalidTokenProvided {
            get {
                return ResourceManager.GetString("InvalidTokenProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified method handle is incorrect for the proxy of type &apos;{0}&apos;.
        /// </summary>
        internal static string InvalidTypedProxyMethodHandle {
            get {
                return ResourceManager.GetString("InvalidTypedProxyMethodHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided URI scheme &apos;{0}&apos; is invalid; expected &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidUriScheme {
            get {
                return ResourceManager.GetString("InvalidUriScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value &apos;{0}&apos; provided for &apos;{1}&apos; from namespace &apos;{2}&apos; is an invalid absolute URI..
        /// </summary>
        internal static string InvalidUriValue {
            get {
                return ResourceManager.GetString("InvalidUriValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid binary representation of an X.509 certificate..
        /// </summary>
        internal static string InvalidX509RawData {
            get {
                return ResourceManager.GetString("InvalidX509RawData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected XML qualified name, found &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidXmlQualifiedName {
            get {
                return ResourceManager.GetString("InvalidXmlQualifiedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuedToken security authentication mode requires the issued token to contain a symmetric key..
        /// </summary>
        internal static string IssuedTokenAuthenticationModeRequiresSymmetricIssuedKey {
            get {
                return ResourceManager.GetString("IssuedTokenAuthenticationModeRequiresSymmetricIssuedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is only available in a deserialized RequestSecurityToken..
        /// </summary>
        internal static string ItemAvailableInDeserializedRSTOnly {
            get {
                return ResourceManager.GetString("ItemAvailableInDeserializedRSTOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is only available in a deserialized RequestSecurityTokenResponse..
        /// </summary>
        internal static string ItemAvailableInDeserializedRSTROnly {
            get {
                return ResourceManager.GetString("ItemAvailableInDeserializedRSTROnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item does not exist in SynchronizedKeyedCollection..
        /// </summary>
        internal static string ItemDoesNotExistInSynchronizedKeyedCollection0 {
            get {
                return ResourceManager.GetString("ItemDoesNotExistInSynchronizedKeyedCollection0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not available in deserialized RequestSecurityToken..
        /// </summary>
        internal static string ItemNotAvailableInDeserializedRST {
            get {
                return ResourceManager.GetString("ItemNotAvailableInDeserializedRST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not available in deserialized RequestSecurityTokenResponse..
        /// </summary>
        internal static string ItemNotAvailableInDeserializedRSTR {
            get {
                return ResourceManager.GetString("ItemNotAvailableInDeserializedRSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This SecurityKeyIdentifier does not have any clause that can create a key..
        /// </summary>
        internal static string KeyIdentifierCannotCreateKey {
            get {
                return ResourceManager.GetString("KeyIdentifierCannotCreateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This SecurityKeyIdentifierClause does not support key creation..
        /// </summary>
        internal static string KeyIdentifierClauseDoesNotSupportKeyCreation {
            get {
                return ResourceManager.GetString("KeyIdentifierClauseDoesNotSupportKeyCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key length &apos;{0}&apos; is not a multiple of 8 for symmetric keys..
        /// </summary>
        internal static string KeyLengthMustBeMultipleOfEight {
            get {
                return ResourceManager.GetString("KeyLengthMustBeMultipleOfEight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key effective and expiration times must be bounded by the token effective and expiration times..
        /// </summary>
        internal static string KeyLifetimeNotWithinTokenLifetime {
            get {
                return ResourceManager.GetString("KeyLifetimeNotWithinTokenLifetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was received with a sequence number higher than the sequence number of the last message in this sequence. This is a violation of the sequence number protocol. The reliable session was faulted..
        /// </summary>
        internal static string LastMessageNumberExceeded {
            get {
                return ResourceManager.GetString("LastMessageNumberExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of this argument must be greater than 0..
        /// </summary>
        internal static string LengthMustBeGreaterThanZero {
            get {
                return ResourceManager.GetString("LengthMustBeGreaterThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The localId cannot be empty. Specify a valid &apos;localId&apos;..
        /// </summary>
        internal static string LocalIdCannotBeEmpty {
            get {
                return ResourceManager.GetString("LocalIdCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot claim lock within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string LockTimeoutExceptionMessage {
            get {
                return ResourceManager.GetString("LockTimeoutExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the TransportBindingElement&apos;s ManualAddressing property was set to true on a binding that is configured to create reliable sessions. This combination is not supported and the channel factory or service host was not opened..
        /// </summary>
        internal static string ManualAddressingNotSupported {
            get {
                return ResourceManager.GetString("ManualAddressingNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manual addressing is enabled on this factory, so all messages sent must be pre-addressed..
        /// </summary>
        internal static string ManualAddressingRequiresAddressedMessages {
            get {
                return ResourceManager.GetString("ManualAddressingRequiresAddressedMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For TransferMode.Buffered, MaxReceivedMessageSize and MaxBufferSize must be the same value..
        /// </summary>
        internal static string MaxBufferSizeMustMatchMaxReceivedMessageSize {
            get {
                return ResourceManager.GetString("MaxBufferSizeMustMatchMaxReceivedMessageSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MaxBufferSize must not exceed MaxReceivedMessageSize..
        /// </summary>
        internal static string MaxBufferSizeMustNotExceedMaxReceivedMessageSize {
            get {
                return ResourceManager.GetString("MaxBufferSizeMustNotExceedMaxReceivedMessageSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recursive policy fetching limit has been reached. Check to determine if there is a loop in the federation service chain..
        /// </summary>
        internal static string MaximumPolicyRedirectionsExceeded {
            get {
                return ResourceManager.GetString("MaximumPolicyRedirectionsExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message size quota for incoming messages ({0}) has been exceeded. To increase the quota, use the MaxReceivedMessageSize property on the appropriate binding element..
        /// </summary>
        internal static string MaxReceivedMessageSizeExceeded {
            get {
                return ResourceManager.GetString("MaxReceivedMessageSizeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This factory buffers messages, so the message sizes must be in the range of an integer value..
        /// </summary>
        internal static string MaxReceivedMessageSizeMustBeInIntegerRange {
            get {
                return ResourceManager.GetString("MaxReceivedMessageSizeMustBeInIntegerRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message size quota for outgoing messages ({0}) has been exceeded..
        /// </summary>
        internal static string MaxSentMessageSizeExceeded {
            get {
                return ResourceManager.GetString("MaxSentMessageSizeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ... stream ....
        /// </summary>
        internal static string MessageBodyIsStream {
            get {
                return ResourceManager.GetString("MessageBodyIsStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ....
        /// </summary>
        internal static string MessageBodyIsUnknown {
            get {
                return ResourceManager.GetString("MessageBodyIsUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A body element was not found inside the message envelope..
        /// </summary>
        internal static string MessageBodyMissing {
            get {
                return ResourceManager.GetString("MessageBodyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body reader is in ReadState &apos;{0}&apos; and cannot be consumed..
        /// </summary>
        internal static string MessageBodyReaderInvalidReadState {
            get {
                return ResourceManager.GetString("MessageBodyReaderInvalidReadState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ... Error reading body: {0}: {1} ....
        /// </summary>
        internal static string MessageBodyToStringError {
            get {
                return ResourceManager.GetString("MessageBodyToStringError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageBuffer is closed..
        /// </summary>
        internal static string MessageBufferIsClosed {
            get {
                return ResourceManager.GetString("MessageBufferIsClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message is closed..
        /// </summary>
        internal static string MessageClosed {
            get {
                return ResourceManager.GetString("MessageClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This message cannot support the operation because it has been copied..
        /// </summary>
        internal static string MessageHasBeenCopied {
            get {
                return ResourceManager.GetString("MessageHasBeenCopied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This message cannot support the operation because it has been read..
        /// </summary>
        internal static string MessageHasBeenRead {
            get {
                return ResourceManager.GetString("MessageHasBeenRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This message cannot support the operation because it has been written..
        /// </summary>
        internal static string MessageHasBeenWritten {
            get {
                return ResourceManager.GetString("MessageHasBeenWritten", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the addressHeaders argument is invalid because the collection contains null values. Null is not a valid value for the AddressHeaderCollection..
        /// </summary>
        internal static string MessageHeaderIsNull0 {
            get {
                return ResourceManager.GetString("MessageHeaderIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the header(s) ({0}) differs from the version of the message ({1})..
        /// </summary>
        internal static string MessageHeaderVersionMismatch {
            get {
                return ResourceManager.GetString("MessageHeaderVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; header cannot be added because it does not support the specified message version &apos;{1}&apos;..
        /// </summary>
        internal static string MessageHeaderVersionNotSupported {
            get {
                return ResourceManager.GetString("MessageHeaderVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of the message cannot be read because it is empty..
        /// </summary>
        internal static string MessageIsEmpty {
            get {
                return ResourceManager.GetString("MessageIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message number for this sequence has been exceeded. The reliable session was faulted..
        /// </summary>
        internal static string MessageNumberRollover {
            get {
                return ResourceManager.GetString("MessageNumberRollover", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array passed does not have enough space to hold all the properties contained by this collection..
        /// </summary>
        internal static string MessagePropertiesArraySize0 {
            get {
                return ResourceManager.GetString("MessagePropertiesArraySize0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property with the name &apos;{0}&apos; is not present..
        /// </summary>
        internal static string MessagePropertyNotFound {
            get {
                return ResourceManager.GetString("MessagePropertyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IMessageProperty could not be copied. CreateCopy returned null..
        /// </summary>
        internal static string MessagePropertyReturnedNullCopy {
            get {
                return ResourceManager.GetString("MessagePropertyReturnedNullCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityVersion must be WsSecurity10 or WsSecurity11..
        /// </summary>
        internal static string MessageSecurityVersionOutOfRange {
            get {
                return ResourceManager.GetString("MessageSecurityVersionOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Factory buffers messages, so the message sizes must be in the range of a int value..
        /// </summary>
        internal static string MessageSizeMustBeInIntegerRange {
            get {
                return ResourceManager.GetString("MessageSizeMustBeInIntegerRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The text encoding &apos;{0}&apos; used in the text message format is not supported..
        /// </summary>
        internal static string MessageTextEncodingNotSupported {
            get {
                return ResourceManager.GetString("MessageTextEncodingNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the binding elements in binding &apos;{0}&apos; define a message version. At least one binding element must define a message version and return it from the GetProperty&lt;MessageVersion&gt; method..
        /// </summary>
        internal static string MessageVersionMissingFromBinding {
            get {
                return ResourceManager.GetString("MessageVersionMissingFromBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1}.
        /// </summary>
        internal static string MessageVersionToStringFormat {
            get {
                return ResourceManager.GetString("MessageVersionToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized message version..
        /// </summary>
        internal static string MessageVersionUnknown {
            get {
                return ResourceManager.GetString("MessageVersionUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a problem with the XML that was received from the network. See inner exception for more details..
        /// </summary>
        internal static string MessageXmlProtocolError {
            get {
                return ResourceManager.GetString("MessageXmlProtocolError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} assertion&apos;s Milliseconds attribute does not fall within the range this binding uses. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string MillisecondsNotConvertibleToBindingRange {
            get {
                return ResourceManager.GetString("MillisecondsNotConvertibleToBindingRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receiver returned an error indicating that the content type was missing on the request to {0}.  See the inner exception for more information..
        /// </summary>
        internal static string MissingContentType {
            get {
                return ResourceManager.GetString("MissingContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to X509CertificateValidationMode.Custom requires a CustomCertificateValidator. Specify the CustomCertificateValidator property..
        /// </summary>
        internal static string MissingCustomCertificateValidator {
            get {
                return ResourceManager.GetString("MissingCustomCertificateValidator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The KeyInfo clause is missing or empty in EncryptedKey..
        /// </summary>
        internal static string MissingKeyInfoInEncryptedKey {
            get {
                return ResourceManager.GetString("MissingKeyInfoInEncryptedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Request Message is missing a MessageID header. One is required to correlate a reply..
        /// </summary>
        internal static string MissingMessageID {
            get {
                return ResourceManager.GetString("MissingMessageID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; does not properly implement the async pattern, as more than one corresponding method &apos;{2}&apos; was found. When using the async pattern, exactly one end method must be provided. Either remove or rename one or more of the &apos;{2}&apos; methods such that there is just one, or set the AsyncPattern property on method &apos;{0}&apos; to false..
        /// </summary>
        internal static string MoreThanOneEndMethodFoundForAsyncBeginMethod3 {
            get {
                return ResourceManager.GetString("MoreThanOneEndMethodFoundForAsyncBeginMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageVersion &apos;{0}&apos; not supported by MTOM encoder..
        /// </summary>
        internal static string MtomEncoderBadMessageVersion {
            get {
                return ResourceManager.GetString("MtomEncoderBadMessageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling IWsdlExportExtension.ExportContract twice with the same ContractDescription is not supported..
        /// </summary>
        internal static string MultipleCallsToExportContractWithSameContract {
            get {
                return ResourceManager.GetString("MultipleCallsToExportContractWithSameContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extensions cannot contain an Identity if one is supplied as a constructor argument..
        /// </summary>
        internal static string MultipleIdentities {
            get {
                return ResourceManager.GetString("MultipleIdentities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Policy for multiple issuer endpoints was retrieved from &apos;{0}&apos; but the relying party&apos;s policy does not specify which issuer endpoint to use. One of the endpoints was selected as the issuer endpoint to use. If you are using svcutil, the other endpoints will be available in commented form in the configuration as &lt;alternativeIssuedTokenParameters&gt;. Check the configuration to ensure that the right issuer endpoint was selected..
        /// </summary>
        internal static string MultipleIssuerEndpointsFound {
            get {
                return ResourceManager.GetString("MultipleIssuerEndpointsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one MessageEncodingBindingElement was found in the BindingParameters of the BindingContext.  This usually is caused by having multiple MessageEncodingBindingElements in a CustomBinding. Remove all but one of these elements..
        /// </summary>
        internal static string MultipleMebesInParameters {
            get {
                return ResourceManager.GetString("MultipleMebesInParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple headers with name &apos;{0}&apos; and namespace &apos;{1}&apos; found..
        /// </summary>
        internal static string MultipleMessageHeaders {
            get {
                return ResourceManager.GetString("MultipleMessageHeaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple headers with name &apos;{0}&apos; and namespace &apos;{1}&apos; and role &apos;{2}&apos; found..
        /// </summary>
        internal static string MultipleMessageHeadersWithActor {
            get {
                return ResourceManager.GetString("MultipleMessageHeadersWithActor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple RelatesTo headers with relationship &apos;{0}&apos; found.  Only one is allowed per relationship..
        /// </summary>
        internal static string MultipleRelatesToHeaders {
            get {
                return ResourceManager.GetString("MultipleRelatesToHeaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ClientCredentials cannot be added to the binding parameters because the binding parameters already contains a SecurityCredentialsManager &apos;{0}&apos;. If you are configuring custom credentials for the channel, please first remove any existing ClientCredentials from the behaviors collection before adding the custom credential..
        /// </summary>
        internal static string MultipleSecurityCredentialsManagersInChannelBindingParameters {
            get {
                return ResourceManager.GetString("MultipleSecurityCredentialsManagersInChannelBindingParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one IStreamUpgradeProviderElement was found in the BindingParameters of the BindingContext.  This usually is caused by having multiple IStreamUpgradeProviderElements in a CustomBinding. Remove all but one of these elements..
        /// </summary>
        internal static string MultipleStreamUpgradeProvidersInParameters {
            get {
                return ResourceManager.GetString("MultipleStreamUpgradeProvidersInParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple supporting token authenticators with the token parameter type equal to &apos;{0}&apos; cannot be specified. If more than one Supporting Token of the same type is expected in the response, then configure the supporting token collection with just one entry for that SecurityTokenParameters. The SecurityTokenAuthenticator that gets created from the SecurityTokenParameters will be used to authenticate multiple tokens. It is not possible to add SecurityTokenParameters of the same type in the SupportingTokenParamet [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultipleSupportingAuthenticatorsOfSameType {
            get {
                return ResourceManager.GetString("MultipleSupportingAuthenticatorsOfSameType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one version of the {0} assertion was found. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string MultipleVersionsFoundInPolicy {
            get {
                return ResourceManager.GetString("MultipleVersionsFoundInPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport security negotiation failed due to an underlying IO error: {0}..
        /// </summary>
        internal static string NegotiationFailedIO {
            get {
                return ResourceManager.GetString("NegotiationFailedIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No AppliesTo element is present in the deserialized RequestSecurityToken/RequestSecurityTokenResponse..
        /// </summary>
        internal static string NoAppliesToPresent {
            get {
                return ResourceManager.GetString("NoAppliesToPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (Name={0}, Namespace={1}) cannot be used to create a ChannelFactory or a ChannelListener because it appears to be missing a TransportBindingElement.  Every binding must have at least one binding element that derives from TransportBindingElement..
        /// </summary>
        internal static string NoChannelBuilderAvailable {
            get {
                return ResourceManager.GetString("NoChannelBuilderAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken does not have a cookie..
        /// </summary>
        internal static string NoCookieInSct {
            get {
                return ResourceManager.GetString("NoCookieInSct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; does not properly implement the async pattern, as no corresponding method &apos;{2}&apos; could be found. Either provide a method called &apos;{2}&apos; or set the AsyncPattern property on method &apos;{0}&apos; to false..
        /// </summary>
        internal static string NoEndMethodFoundForAsyncBeginMethod3 {
            get {
                return ResourceManager.GetString("NoEndMethodFoundForAsyncBeginMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No IPEndpoints were found for host {0}..
        /// </summary>
        internal static string NoIPEndpointsFoundForHost {
            get {
                return ResourceManager.GetString("NoIPEndpointsFoundForHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No clause of type &apos;{0}&apos; was found in the SecurityKeyIdentifier..
        /// </summary>
        internal static string NoKeyIdentifierClauseFound {
            get {
                return ResourceManager.GetString("NoKeyIdentifierClauseFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RequestedSecurityToken not specified in RequestSecurityTokenResponse..
        /// </summary>
        internal static string NoLicenseXml {
            get {
                return ResourceManager.GetString("NoLicenseXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fault reason does not contain any text translations..
        /// </summary>
        internal static string NoMatchingTranslationFoundForFaultText {
            get {
                return ResourceManager.GetString("NoMatchingTranslationFoundForFaultText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified nonce is too short. The minimum required nonce length is 4 bytes..
        /// </summary>
        internal static string NonceLengthTooShort {
            get {
                return ResourceManager.GetString("NonceLengthTooShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ReplayWindow and ClockSkew cannot be the maximum possible value when replay detection is enabled..
        /// </summary>
        internal static string NoncesCachedInfinitely {
            get {
                return ResourceManager.GetString("NoncesCachedInfinitely", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The translation set cannot contain nulls..
        /// </summary>
        internal static string NoNullTranslations {
            get {
                return ResourceManager.GetString("NoNullTranslations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No RequestSecurityTokenResponse elements were found..
        /// </summary>
        internal static string NoRequestSecurityTokenResponseElements {
            get {
                return ResourceManager.GetString("NoRequestSecurityTokenResponseElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken does not have a context-id..
        /// </summary>
        internal static string NoSecurityContextIdentifier {
            get {
                return ResourceManager.GetString("NoSecurityContextIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some of the binding elements in this binding were not used when building the ChannelFactory / ChannelListener.  This may be have been caused by the binding elements being misordered.  The recommended order for binding elements is: TransactionFlow, ReliableSession, Security, CompositeDuplex, OneWay, StreamSecurity, MessageEncoding, Transport.  Note that the TransportBindingElement must be last.  The following binding elements were not built: {0}..
        /// </summary>
        internal static string NotAllBindingElementsBuilt {
            get {
                return ResourceManager.GetString("NotAllBindingElementsBuilt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security policy expert failed. The provided transport token assertion of type &apos;{0}&apos; did not create a transport token assertion to include the sp:TransportBinding security policy assertion..
        /// </summary>
        internal static string NoTransportTokenAssertionProvided {
            get {
                return ResourceManager.GetString("NoTransportTokenAssertionProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find usable policy alternatives..
        /// </summary>
        internal static string NoUsablePolicyAssertions {
            get {
                return ResourceManager.GetString("NoUsablePolicyAssertions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required UserNameSecurityToken was not provided..
        /// </summary>
        internal static string NoUserNameTokenProvided {
            get {
                return ResourceManager.GetString("NoUserNameTokenProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No value..
        /// </summary>
        internal static string NoValue0 {
            get {
                return ResourceManager.GetString("NoValue0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} object has been disposed..
        /// </summary>
        internal static string ObjectDisposed {
            get {
                return ResourceManager.GetString("ObjectDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is read-only..
        /// </summary>
        internal static string ObjectIsReadOnly {
            get {
                return ResourceManager.GetString("ObjectIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified offset exceeds the upper bound of the buffer ({0})..
        /// </summary>
        internal static string OffsetExceedsBufferBound {
            get {
                return ResourceManager.GetString("OffsetExceedsBufferBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified offset exceeds the buffer size ({0} bytes)..
        /// </summary>
        internal static string OffsetExceedsBufferSize {
            get {
                return ResourceManager.GetString("OffsetExceedsBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{1}&apos; in type &apos;{0}&apos; is marked IsOneWay=true and declares one or more FaultContractAttributes. One-way methods cannot declare FaultContractAttributes. To fix it, change IsOneWay to false or remove the FaultContractAttributes..
        /// </summary>
        internal static string OneWayAndFaultsIncompatible2 {
            get {
                return ResourceManager.GetString("OneWayAndFaultsIncompatible2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The one-way operation returned a fault message.  The reason for the fault was &apos;{0}&apos;..
        /// </summary>
        internal static string OneWayOperationReturnedFault {
            get {
                return ResourceManager.GetString("OneWayOperationReturnedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The one-way operation returned a fault message with Action=&apos;{0}&apos;..
        /// </summary>
        internal static string OneWayOperationReturnedLargeFault {
            get {
                return ResourceManager.GetString("OneWayOperationReturnedLargeFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The one-way operation returned a non-null message with Action=&apos;{0}&apos;..
        /// </summary>
        internal static string OneWayOperationReturnedMessage {
            get {
                return ResourceManager.GetString("OneWayOperationReturnedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One way operation {0} cannot not specify a reply action..
        /// </summary>
        internal static string OneWayOperationShouldNotSpecifyAReplyAction1 {
            get {
                return ResourceManager.GetString("OneWayOperationShouldNotSpecifyAReplyAction1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only body return values are supported currently for protection, MessagePartDescription was specified..
        /// </summary>
        internal static string OnlyBodyReturnValuesSupported {
            get {
                return ResourceManager.GetString("OnlyBodyReturnValuesSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open timed out after {0} while establishing a transport session to {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string OpenTimedOutEstablishingTransportSession {
            get {
                return ResourceManager.GetString("OpenTimedOutEstablishingTransportSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation was aborted while establishing a connection to {0}..
        /// </summary>
        internal static string OperationAbortedDuringConnectionEstablishment {
            get {
                return ResourceManager.GetString("OperationAbortedDuringConnectionEstablishment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be done after processing is started..
        /// </summary>
        internal static string OperationCannotBeDoneAfterProcessingIsStarted {
            get {
                return ResourceManager.GetString("OperationCannotBeDoneAfterProcessingIsStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not valid until security negotiation is complete..
        /// </summary>
        internal static string OperationInvalidBeforeSecurityNegotiation {
            get {
                return ResourceManager.GetString("OperationInvalidBeforeSecurityNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation property of OperationAttributeGenerationContext is required to generate an attribute based on settings. .
        /// </summary>
        internal static string OperationPropertyIsRequiredForAttributeGeneration {
            get {
                return ResourceManager.GetString("OperationPropertyIsRequiredForAttributeGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The optional WSDL extension element &apos;{0}&apos; from namespace &apos;{1}&apos; was not handled.\r\nXPath: {2}.
        /// </summary>
        internal static string OptionalWSDLExtensionIgnored {
            get {
                return ResourceManager.GetString("OptionalWSDLExtensionIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A metadata section containing policy did not have an identifier so it cannot be referenced. .
        /// </summary>
        internal static string PolicyDocumentMustHaveIdentifier {
            get {
                return ResourceManager.GetString("PolicyDocumentMustHaveIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a policy export extension.\r\nExtension: {0}\r\nError: {1}.
        /// </summary>
        internal static string PolicyExtensionExportError {
            get {
                return ResourceManager.GetString("PolicyExtensionExportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a policy import extension.\r\nExtension: {0}\r\nError: {1}.
        /// </summary>
        internal static string PolicyExtensionImportError {
            get {
                return ResourceManager.GetString("PolicyExtensionImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElementImporter cannot import policy because PolicyImportContext.BindingElements collection is null..
        /// </summary>
        internal static string PolicyImportContextBindingElementCollectionIsNull {
            get {
                return ResourceManager.GetString("PolicyImportContextBindingElementCollectionIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unreachable policy detected.\r\nA WS-Policy element embedded in WSDL is missing a fragment identifier. This policy cannot be referenced by any WS-PolicyAttachment mechanisms.\r\nXPath:{0}.
        /// </summary>
        internal static string PolicyInWsdlMustHaveFragmentId {
            get {
                return ResourceManager.GetString("PolicyInWsdlMustHaveFragmentId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy reference was ignored because the URI of the reference was empty..
        /// </summary>
        internal static string PolicyReferenceInvalidId {
            get {
                return ResourceManager.GetString("PolicyReferenceInvalidId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy reference was ignored because the required {0} attribute was missing..
        /// </summary>
        internal static string PolicyReferenceMissingURI {
            get {
                return ResourceManager.GetString("PolicyReferenceMissingURI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message security policy for the &apos;{0}&apos; action requires confidentiality without integrity. Confidentiality without integrity is not supported..
        /// </summary>
        internal static string PolicyRequiresConfidentialityWithoutIntegrity {
            get {
                return ResourceManager.GetString("PolicyRequiresConfidentialityWithoutIntegrity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have tried to create a channel to a service that does not support .Net Framing. .
        /// </summary>
        internal static string PreambleAckIncorrect {
            get {
                return ResourceManager.GetString("PreambleAckIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have tried to create a channel to a service that does not support .Net Framing. It is possible that you are encountering an HTTP endpoint..
        /// </summary>
        internal static string PreambleAckIncorrectMaybeHttp {
            get {
                return ResourceManager.GetString("PreambleAckIncorrectMaybeHttp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PrivacyNotice element Version attribute must have an integer value..
        /// </summary>
        internal static string PrivacyNoticeElementVersionAttributeInvalid {
            get {
                return ResourceManager.GetString("PrivacyNoticeElementVersionAttributeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proof token XML element is not expected in the response..
        /// </summary>
        internal static string ProofTokenXmlUnexpectedInRstr {
            get {
                return ResourceManager.GetString("ProofTokenXmlUnexpectedInRstr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required &apos;{0}&apos; property on the &apos;{1}&apos; security protocol factory is not set or has an invalid value..
        /// </summary>
        internal static string PropertySettingErrorOnProtocolFactory {
            get {
                return ResourceManager.GetString("PropertySettingErrorOnProtocolFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol factory cannot create a protocol..
        /// </summary>
        internal static string ProtocolFactoryCouldNotCreateProtocol {
            get {
                return ResourceManager.GetString("ProtocolFactoryCouldNotCreateProtocol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NetworkCredentials provided for the Kerberos Token does not have a valid UserName..
        /// </summary>
        internal static string ProvidedNetworkCredentialsForKerberosHasInvalidUserName {
            get {
                return ResourceManager.GetString("ProvidedNetworkCredentialsForKerberosHasInvalidUserName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PSHA1 key length &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string Psha1KeyLengthInvalid {
            get {
                return ResourceManager.GetString("Psha1KeyLengthInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receive context, {0}, cannot be used for sending delayed acks because it is in the Faulted state..
        /// </summary>
        internal static string ReceiveContextFaulted {
            get {
                return ResourceManager.GetString("ReceiveContextFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel received an unexpected fault input message while closing. The fault reason given is: &apos;{0}&apos;.
        /// </summary>
        internal static string ReceiveShutdownReturnedFault {
            get {
                return ResourceManager.GetString("ReceiveShutdownReturnedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel received an unexpected fault input message with Action = &apos;{0}&apos; while closing. You should only close your channel when you are not expecting any more input messages..
        /// </summary>
        internal static string ReceiveShutdownReturnedLargeFault {
            get {
                return ResourceManager.GetString("ReceiveShutdownReturnedLargeFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel received an unexpected input message with Action &apos;{0}&apos; while closing. You should only close your channel when you are not expecting any more input messages..
        /// </summary>
        internal static string ReceiveShutdownReturnedMessage {
            get {
                return ResourceManager.GetString("ReceiveShutdownReturnedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive on local address {0} timed out after {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string ReceiveTimedOut {
            get {
                return ResourceManager.GetString("ReceiveTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string ReceiveTimedOut2 {
            get {
                return ResourceManager.GetString("ReceiveTimedOut2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following remote identity failed verification: &apos;{0}&apos;..
        /// </summary>
        internal static string RemoteIdentityFailedVerification {
            get {
                return ResourceManager.GetString("RemoteIdentityFailedVerification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply has already been sent from this RequestContext..
        /// </summary>
        internal static string ReplyAlreadySent {
            get {
                return ResourceManager.GetString("ReplyAlreadySent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request channel timed out attempting to send after {0}. Increase the timeout value passed to the call to Request or increase the SendTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string RequestChannelSendTimedOut {
            get {
                return ResourceManager.GetString("RequestChannelSendTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request channel timed out while waiting for a reply after {0}. Increase the timeout value passed to the call to Request or increase the SendTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string RequestChannelWaitForReplyTimedOut {
            get {
                return ResourceManager.GetString("RequestChannelWaitForReplyTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requestContext has been aborted..
        /// </summary>
        internal static string RequestContextAborted {
            get {
                return ResourceManager.GetString("RequestContextAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply message cannot be created because the request message does not have a MessageID..
        /// </summary>
        internal static string RequestMessageDoesNotHaveAMessageID {
            get {
                return ResourceManager.GetString("RequestMessageDoesNotHaveAMessageID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required {0} attribute is missing from the {1} element in the {2} assertion. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string RequiredAttributeIsMissing {
            get {
                return ResourceManager.GetString("RequiredAttributeIsMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is required on element &apos;{1}&apos;..
        /// </summary>
        internal static string RequiredAttributeMissing {
            get {
                return ResourceManager.GetString("RequiredAttributeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} assertion&apos;s required Milliseconds attribute is not schema compliant. Milliseconds must be convertible to an unsigned long. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string RequiredMillisecondsAttributeIncorrect {
            get {
                return ResourceManager.GetString("RequiredMillisecondsAttributeIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required WSDL extension element &apos;{0}&apos; from namespace &apos;{1}&apos; was not handled..
        /// </summary>
        internal static string RequiredWSDLExtensionIgnored {
            get {
                return ResourceManager.GetString("RequiredWSDLExtensionIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content type {0} of the response message does not match the content type of the binding ({1}). If using a custom encoder, be sure that the IsContentTypeSupported method is implemented properly. The first {2} bytes of the response were: &apos;{3}&apos;..
        /// </summary>
        internal static string ResponseContentTypeMismatch {
            get {
                return ResourceManager.GetString("ResponseContentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityTokenResponse has multiple RequestedSecurityToken elements..
        /// </summary>
        internal static string RstrHasMultipleIssuedTokens {
            get {
                return ResourceManager.GetString("RstrHasMultipleIssuedTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityTokenResponse has multiple RequestedProofToken elements..
        /// </summary>
        internal static string RstrHasMultipleProofTokens {
            get {
                return ResourceManager.GetString("RstrHasMultipleProofTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KeySize element not present in RequestSecurityTokenResponse..
        /// </summary>
        internal static string RstrKeySizeNotProvided {
            get {
                return ResourceManager.GetString("RstrKeySizeNotProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DispatchOperation requires Invoker..
        /// </summary>
        internal static string RuntimeRequiresInvoker0 {
            get {
                return ResourceManager.GetString("RuntimeRequiresInvoker0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a validation error on a schema generated during export:\r\n    Source: {0}\r\n    Line: {1} Column: {2}\r\n   Validation Error: {3}.
        /// </summary>
        internal static string SchemaValidationError {
            get {
                return ResourceManager.GetString("SchemaValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create security binding element based on configuration data. The secure conversation bootstrap requires another secure conversation which is not supported. .
        /// </summary>
        internal static string SecureConversationBootstrapCannotUseSecureConversation {
            get {
                return ResourceManager.GetString("SecureConversationBootstrapCannotUseSecureConversation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured SecureConversation version does not support sessions. Use WSSecureConversationFeb2005 or above..
        /// </summary>
        internal static string SecureConversationDriverVersionDoesNotSupportSession {
            get {
                return ResourceManager.GetString("SecureConversationDriverVersionDoesNotSupportSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create security binding element based on the configuration data. When secure conversation authentication mode is selected, the secure conversation bootstrap binding element must also be specified. .
        /// </summary>
        internal static string SecureConversationNeedsBootstrapSecurity {
            get {
                return ResourceManager.GetString("SecureConversationNeedsBootstrapSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot establish a reliable session without secure conversation. Enable secure conversation..
        /// </summary>
        internal static string SecureConversationRequiredByReliableSession {
            get {
                return ResourceManager.GetString("SecureConversationRequiredByReliableSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security channel or listener factory creation failed. Secure conversation security token parameters do not specify the bootstrap security binding element..
        /// </summary>
        internal static string SecureConversationSecurityTokenParametersRequireBootstrapBinding {
            get {
                return ResourceManager.GetString("SecureConversationSecurityTokenParametersRequireBootstrapBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing audit messages to the Security log is not supported by the current platform. You must write audit messages to the Application log..
        /// </summary>
        internal static string SecurityAuditPlatformNotSupported {
            get {
                return ResourceManager.GetString("SecurityAuditPlatformNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security policy was imported for the endpoint. The security policy contains requirements that cannot be represented in a Windows Communication Foundation configuration. Look for a comment about the SecurityBindingElement parameters that are required in the configuration file that was generated. Create the correct binding element with code. The binding configuration that is in the configuration file is not secure..
        /// </summary>
        internal static string SecurityBindingElementCannotBeExpressedInConfig {
            get {
                return ResourceManager.GetString("SecurityBindingElementCannotBeExpressedInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security capabilities of binding &apos;{0}&apos; do not match those of the generated runtime object. Most likely this means the binding contains a StreamSecurityBindingElement, but lacks a TransportBindingElement that supports Stream Security (such as TCP or Named Pipes). Either remove the unused StreamSecurityBindingElement or use a transport that supports this element..
        /// </summary>
        internal static string SecurityCapabilitiesMismatched {
            get {
                return ResourceManager.GetString("SecurityCapabilitiesMismatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken with context-id={0} (key generation-id={1}) is not registered..
        /// </summary>
        internal static string SecurityContextNotRegistered {
            get {
                return ResourceManager.GetString("SecurityContextNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security protocol &apos;{0}&apos; cannot do replay detection..
        /// </summary>
        internal static string SecurityProtocolCannotDoReplayDetection {
            get {
                return ResourceManager.GetString("SecurityProtocolCannotDoReplayDetection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server &apos;{0}&apos; sent back a fault indicating it is too busy to process the request. Please retry later. Please see the inner exception for fault details..
        /// </summary>
        internal static string SecurityServerTooBusy {
            get {
                return ResourceManager.GetString("SecurityServerTooBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DataProtectionSecurityStateEncoder is unable to decode the byte array. Ensure that a &apos;UserProfile&apos; is loaded, if this is a &apos;web farm scenario&apos; ensure all servers are running as the same user with the roaming profiles or provide a custom SecurityStateEncoder&apos;..
        /// </summary>
        internal static string SecurityStateEncoderDecodingFailure {
            get {
                return ResourceManager.GetString("SecurityStateEncoderDecodingFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DataProtectionSecurityStateEncoder is unable to encode the byte array. Ensure that a &apos;UserProfile&apos; is loaded, if this is a &apos;web farm scenario&apos; ensure all servers are running as the same user with the roaming profiles or provide a custom SecurityStateEncoder&apos;..
        /// </summary>
        internal static string SecurityStateEncoderEncodingFailure {
            get {
                return ResourceManager.GetString("SecurityStateEncoderEncodingFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token manager cannot create a token authenticator for requirement &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityTokenManagerCannotCreateAuthenticatorForRequirement {
            get {
                return ResourceManager.GetString("SecurityTokenManagerCannotCreateAuthenticatorForRequirement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token manager cannot create a token provider for requirement &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityTokenManagerCannotCreateProviderForRequirement {
            get {
                return ResourceManager.GetString("SecurityTokenManagerCannotCreateProviderForRequirement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CloneCore method of {0} type returned an invalid result. .
        /// </summary>
        internal static string SecurityTokenParametersCloneInvalidResult {
            get {
                return ResourceManager.GetString("SecurityTokenParametersCloneInvalidResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token requirement does not contain a property &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityTokenRequirementDoesNotContainProperty {
            get {
                return ResourceManager.GetString("SecurityTokenRequirementDoesNotContainProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token requirement has an unexpected type &apos;{1}&apos; for property &apos;{0}&apos;. The expected property type is &apos;{2}&apos;..
        /// </summary>
        internal static string SecurityTokenRequirementHasInvalidTypeForProperty {
            get {
                return ResourceManager.GetString("SecurityTokenRequirementHasInvalidTypeForProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot Send messages on a channel after CloseOutputSession has been called..
        /// </summary>
        internal static string SendCannotBeCalledAfterCloseOutputSession {
            get {
                return ResourceManager.GetString("SendCannotBeCalledAfterCloseOutputSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sending to via {0} timed out after {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SendToViaTimedOut {
            get {
                return ResourceManager.GetString("SendToViaTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server at {0} rejected the session-establishment request..
        /// </summary>
        internal static string ServerRejectedSessionPreamble {
            get {
                return ResourceManager.GetString("ServerRejectedSessionPreamble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server rejected the upgrade request..
        /// </summary>
        internal static string ServerRejectedUpgradeRequest {
            get {
                return ResourceManager.GetString("ServerRejectedUpgradeRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server &apos;{0}&apos; is too busy to process this request. Try again later..
        /// </summary>
        internal static string ServerTooBusy {
            get {
                return ResourceManager.GetString("ServerTooBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operations marked with IsOneWay=true must not declare output parameters, by-reference parameters or return values..
        /// </summary>
        internal static string ServiceOperationsMarkedWithIsOneWayTrueMust0 {
            get {
                return ResourceManager.GetString("ServiceOperationsMarkedWithIsOneWayTrueMust0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} declared on method &apos;{1}&apos; in type &apos;{2}&apos; is invalid. {0}s are only valid on methods that are declared in a type that has ServiceContractAttribute. Either add ServiceContractAttribute to type &apos;{2}&apos; or remove {0} from method &apos;{1}&apos;..
        /// </summary>
        internal static string ServicesWithoutAServiceContractAttributeCan2 {
            get {
                return ResourceManager.GetString("ServicesWithoutAServiceContractAttributeCan2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Session value &apos;{0}&apos; is invalid. Please specify &apos;CurrentSession&apos;,&apos;ServiceSession&apos; or a valid non-negative Windows Session Id..
        /// </summary>
        internal static string SessionValueInvalid {
            get {
                return ResourceManager.GetString("SessionValueInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operations {0} and {1} have the same action ({2}).  Every operation must have a unique action value..
        /// </summary>
        internal static string SFxActionDemuxerDuplicate {
            get {
                return ResourceManager.GetString("SFxActionDemuxerDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Part {1} in message {0} cannot be exported with RPC or encoded since its type is anonymous..
        /// </summary>
        internal static string SFxAnonymousTypeNotSupported {
            get {
                return ResourceManager.GetString("SFxAnonymousTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; in class &apos;{1}&apos; has bad parameter metadata: a pass-by-reference parameter is marked with the &apos;in&apos; but not the &apos;out&apos; parameter mode..
        /// </summary>
        internal static string SFxBadByReferenceParameterMetadata {
            get {
                return ResourceManager.GetString("SFxBadByReferenceParameterMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; in class &apos;{1}&apos; has bad parameter metadata: a pass-by-value parameter is marked with the &apos;out&apos; parameter mode..
        /// </summary>
        internal static string SFxBadByValueParameterMetadata {
            get {
                return ResourceManager.GetString("SFxBadByValueParameterMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem reading the MetadataSet argument: a MetadataSection instance with identifier &apos;{0}&apos; and dialect &apos;{1}&apos; has a Metadata property whose type does not match the dialect. The expected Metadata type for this dialect is &apos;{2}&apos; but was found to be &apos;{3}&apos;..
        /// </summary>
        internal static string SFxBadMetadataDialect {
            get {
                return ResourceManager.GetString("SFxBadMetadataDialect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL supplied to ServiceMetadataBehavior via the ExternalMetadataLocation property or the externalMetadataLocation attribute in the serviceMetadata section in config was a relative URL and there is no base address with which to resolve it. &apos;{0}&apos; was specified..
        /// </summary>
        internal static string SFxBadMetadataLocationNoAppropriateBaseAddress {
            get {
                return ResourceManager.GetString("SFxBadMetadataLocationNoAppropriateBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When calling the CreateFromPolicy method, the policy argument must be an XmlElement instance with LocalName &apos;{1}&apos; and NamespaceUri &apos;{0}&apos;. This XmlElement has LocalName &apos;{3}&apos; and NamespaceUri &apos;{2}&apos;. .
        /// </summary>
        internal static string SFxBadMetadataMustBePolicy {
            get {
                return ResourceManager.GetString("SFxBadMetadataMustBePolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata contains a reference that cannot be resolved: &apos;{0}&apos;..
        /// </summary>
        internal static string SFxBadMetadataReference {
            get {
                return ResourceManager.GetString("SFxBadMetadataReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding specified to do metadata exchange does not contain a TransportBindingElement..
        /// </summary>
        internal static string SFxBindingDoesNotHaveATransportBindingElement {
            get {
                return ResourceManager.GetString("SFxBindingDoesNotHaveATransportBindingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (Name={0}, Namespace={1}) does not contain a TransportBindingElement..
        /// </summary>
        internal static string SFxBindingMustContainTransport2 {
            get {
                return ResourceManager.GetString("SFxBindingMustContainTransport2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding name cannot be null or empty..
        /// </summary>
        internal static string SFXBindingNameCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("SFXBindingNameCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding associated with ServiceMetadataBehavior or ServiceDebugBehavior is not supported.  The inner binding elements used by this binding must support IReplyChannel. Verify that HttpGetBinding/HttpsGetBinding (on ServiceMetadataBehavior) and HttpHelpPageBinding/HttpsHelpPageBinding (on ServiceDebugBehavior) are supported..
        /// </summary>
        internal static string SFxBindingNotSupportedForMetadataHttpGet {
            get {
                return ResourceManager.GetString("SFxBindingNotSupportedForMetadataHttpGet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Body object cannot be null in message {0}.
        /// </summary>
        internal static string SFxBodyCannotBeNull {
            get {
                return ResourceManager.GetString("SFxBodyCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CallbackBehaviorAttribute can only be run as a behavior on an endpoint with a duplex contract. Contract &apos;{0}&apos; is not duplex, as it contains no callback operations..
        /// </summary>
        internal static string SFxCallbackBehaviorAttributeOnlyOnDuplex {
            get {
                return ResourceManager.GetString("SFxCallbackBehaviorAttributeOnlyOnDuplex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation would deadlock because the reply cannot be received until the current Message completes processing. If you want to allow out-of-order message processing, specify ConcurrencyMode of Reentrant or Multiple on {0}..
        /// </summary>
        internal static string SFxCallbackRequestReplyInOrder1 {
            get {
                return ResourceManager.GetString("SFxCallbackRequestReplyInOrder1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to use the contract &apos;{0}&apos; with DuplexChannelFactory, the contract must specify a valid callback contract.  If your contract does not have a callback contract, consider using ChannelFactory instead of DuplexChannelFactory..
        /// </summary>
        internal static string SfxCallbackTypeCannotBeNull {
            get {
                return ResourceManager.GetString("SfxCallbackTypeCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The dispatch instance for duplex callbacks cannot be activated - you must provide an instance..
        /// </summary>
        internal static string SFxCannotActivateCallbackInstace {
            get {
                return ResourceManager.GetString("SFxCannotActivateCallbackInstace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot make a call on this channel because a call to Open() is in progress..
        /// </summary>
        internal static string SFxCannotCallAutoOpenWhenExplicitOpenCalled {
            get {
                return ResourceManager.GetString("SFxCannotCallAutoOpenWhenExplicitOpenCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient can only get metadata from http and https MetadataLocations.  It cannot get metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCannotGetMetadataFromLocation {
            get {
                return ResourceManager.GetString("SFxCannotGetMetadataFromLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient can only get metadata from absolute addresses.  It cannot get metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCannotGetMetadataFromRelativeAddress {
            get {
                return ResourceManager.GetString("SFxCannotGetMetadataFromRelativeAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured policy specifies more than one TransactionProtocol across the operations. A single TransactionProtocol for each endpoint must be specified..
        /// </summary>
        internal static string SFxCannotHaveDifferentTransactionProtocolsInOneBinding {
            get {
                return ResourceManager.GetString("SFxCannotHaveDifferentTransactionProtocolsInOneBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient can only get metadata from http or https addresses when using MetadataExchangeClientMode HttpGet. It cannot get metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCannotHttpGetMetadataFromAddress {
            get {
                return ResourceManager.GetString("SFxCannotHttpGetMetadataFromAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the operation {0} is neither RPC nor document wrapped..
        /// </summary>
        internal static string SFxCannotImportAsParameters_Bare {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_Bare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the wrapper name ({1}) of message {0} does not match the default value ({2}).
        /// </summary>
        internal static string SFxCannotImportAsParameters_DifferentWrapperName {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_DifferentWrapperName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the wrapper namespace ({1}) of message {0} does not match the default value ({2}).
        /// </summary>
        internal static string SFxCannotImportAsParameters_DifferentWrapperNs {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_DifferentWrapperNs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since element name {0} from namespace {1} is not marked nillable.
        /// </summary>
        internal static string SFxCannotImportAsParameters_ElementIsNotNillable {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_ElementIsNotNillable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headers are not supported in RPC encoded format. Headers are ignored in message {0}..
        /// </summary>
        internal static string SFxCannotImportAsParameters_HeadersAreIgnoredInEncoded {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_HeadersAreIgnoredInEncoded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since message {0} has headers.
        /// </summary>
        internal static string SFxCannotImportAsParameters_HeadersAreUnsupported {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_HeadersAreUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the operation {0} has untyped Message as argument or return type.
        /// </summary>
        internal static string SFxCannotImportAsParameters_Message {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since message {0} requires protection..
        /// </summary>
        internal static string SFxCannotImportAsParameters_MessageHasProtectionLevel {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_MessageHasProtectionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since message part namespace ({0}) does not match the default value ({1}).
        /// </summary>
        internal static string SFxCannotImportAsParameters_NamespaceMismatch {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_NamespaceMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the operation has multiple return values..
        /// </summary>
        internal static string SFxCannotImportAsParameters_OutputParameterAndTask {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_OutputParameterAndTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection does not support setting extensions by index.  Please consider using the InsertItem or RemoveItem methods..
        /// </summary>
        internal static string SFxCannotSetExtensionsByIndex {
            get {
                return ResourceManager.GetString("SFxCannotSetExtensionsByIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open ChannelDispatcher because it is does not have a MessageVersion set..
        /// </summary>
        internal static string SFxChannelDispatcherNoMessageVersion {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherNoMessageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ChannelDispatcher at &apos;{0}&apos; is unable to open its IChannelListener as there are no endpoints for the ChannelDispatcher..
        /// </summary>
        internal static string SFxChannelDispatcherUnableToOpen1 {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherUnableToOpen1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ChannelDispatcher at &apos;{0}&apos; with contract(s) &apos;{1}&apos; is unable to open its IChannelListener..
        /// </summary>
        internal static string SFxChannelDispatcherUnableToOpen2 {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherUnableToOpen2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CreateFactory requires that the Endpoint property be initialized. Either provide a valid ServiceEndpoint in the CreateDescription method or override the CreateFactory method to provide an alternative implementation..
        /// </summary>
        internal static string SFxChannelFactoryCannotCreateFactoryWithoutDescription {
            get {
                return ResourceManager.GetString("SFxChannelFactoryCannotCreateFactoryWithoutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Address property on ChannelFactory.Endpoint was null.  The ChannelFactory&apos;s Endpoint must have a valid Address specified..
        /// </summary>
        internal static string SFxChannelFactoryEndpointAddressUri {
            get {
                return ResourceManager.GetString("SFxChannelFactoryEndpointAddressUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying channel factory could not be created because no binding information was found in the configuration file for endpoint with name &apos;{0}&apos;.  Please check the endpoint configuration section with name &apos;{0}&apos; to ensure that binding information is present and correct..
        /// </summary>
        internal static string SFxChannelFactoryNoBindingFoundInConfig1 {
            get {
                return ResourceManager.GetString("SFxChannelFactoryNoBindingFoundInConfig1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying channel factory could not be created because no Binding was passed to the ChannelFactory. Please supply a valid Binding instance via the ChannelFactory constructor..
        /// </summary>
        internal static string SFxChannelFactoryNoBindingFoundInConfigOrCode {
            get {
                return ResourceManager.GetString("SFxChannelFactoryNoBindingFoundInConfigOrCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type argument passed to the generic ChannelFactory class must be an interface type..
        /// </summary>
        internal static string SFxChannelFactoryTypeMustBeInterface {
            get {
                return ResourceManager.GetString("SFxChannelFactoryTypeMustBeInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This channel can no longer be used to send messages as the output session was auto-closed due to a server-initiated shutdown. Either disable auto-close by setting the DispatchRuntime.AutomaticInputSessionShutdown to false, or consider modifying the shutdown protocol with the remote server..
        /// </summary>
        internal static string SFxClientOutputSessionAutoClosed {
            get {
                return ResourceManager.GetString("SFxClientOutputSessionAutoClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceHost close operation timed out after {0}.  This could be because a client failed to close a sessionful channel within the required time.  The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SFxCloseTimedOut1 {
            get {
                return ResourceManager.GetString("SFxCloseTimedOut1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close process timed out waiting for service dispatch to complete..
        /// </summary>
        internal static string SfxCloseTimedOutWaitingForDispatchToComplete {
            get {
                return ResourceManager.GetString("SfxCloseTimedOutWaitingForDispatchToComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODEGEN: {0}.
        /// </summary>
        internal static string SFxCodeGenWarning {
            get {
                return ResourceManager.GetString("SFxCodeGenWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection does not support setting items by index..
        /// </summary>
        internal static string SFxCollectionDoesNotSupportSet0 {
            get {
                return ResourceManager.GetString("SFxCollectionDoesNotSupportSet0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not supported because the collection is read-only..
        /// </summary>
        internal static string SFxCollectionReadOnly {
            get {
                return ResourceManager.GetString("SFxCollectionReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection of type {0} does not support values of type {1}..
        /// </summary>
        internal static string SFxCollectionWrongType2 {
            get {
                return ResourceManager.GetString("SFxCollectionWrongType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ConfigurationName property must be a non-empty string..
        /// </summary>
        internal static string SFxConfigurationNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxConfigurationNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Top level XML element with name {0} in namespace {1} cannot reference {2} type because it already references a different type ({3}). Use a different operation name or MessageBodyMemberAttribute to specify a different name for the Message or Message parts..
        /// </summary>
        internal static string SFxConflictingGlobalElement {
            get {
                return ResourceManager.GetString("SFxConflictingGlobalElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate top level XML Schema type with name {0} in namespace {1}..
        /// </summary>
        internal static string SFxConflictingGlobalType {
            get {
                return ResourceManager.GetString("SFxConflictingGlobalType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of OperationContext.Current is not the OperationContext value installed by this OperationContextScope..
        /// </summary>
        internal static string SFxContextModifiedInsideScope0 {
            get {
                return ResourceManager.GetString("SFxContextModifiedInsideScope0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractDescription&apos;s Name must be a non-empty string..
        /// </summary>
        internal static string SFxContractDescriptionNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxContractDescriptionNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractDescription &apos;{0}&apos; has zero IsInitiating=true operations; a contract must have at least one IsInitiating=true operation..
        /// </summary>
        internal static string SFxContractHasZeroInitiatingOperations {
            get {
                return ResourceManager.GetString("SFxContractHasZeroInitiatingOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractDescription &apos;{0}&apos; has zero operations; a contract must have at least one operation..
        /// </summary>
        internal static string SFxContractHasZeroOperations {
            get {
                return ResourceManager.GetString("SFxContractHasZeroOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service class of type {0} both defines a ServiceContract and inherits a ServiceContract from type {1}. Contract inheritance can only be used among interface types.  If a class is marked with ServiceContractAttribute, it must be the only type in the hierarchy with ServiceContractAttribute.  Consider moving the ServiceContractAttribute on type {1} to a separate interface that type {1} implements..
        /// </summary>
        internal static string SFxContractInheritanceRequiresInterfaces {
            get {
                return ResourceManager.GetString("SFxContractInheritanceRequiresInterfaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service class of type {0} both defines a ServiceContract and inherits a ServiceContract from type {1}. Contract inheritance can only be used among interface types.  If a class is marked with ServiceContractAttribute, then another service class cannot derive from it..
        /// </summary>
        internal static string SFxContractInheritanceRequiresInterfaces2 {
            get {
                return ResourceManager.GetString("SFxContractInheritanceRequiresInterfaces2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SynchronizedReadOnlyCollection&apos;s CopyTo only works if the underlying list implements ICollection..
        /// </summary>
        internal static string SFxCopyToRequiresICollection {
            get {
                return ResourceManager.GetString("SFxCopyToRequiresICollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback contract of contract {0} either does not exist or does not define any operations.  If this is not a duplex contract, consider using ChannelFactory instead of DuplexChannelFactory..
        /// </summary>
        internal static string SFxCreateDuplexChannel1 {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannel1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InstanceContext provided to the ChannelFactory contains a UserObject that does not implement the CallbackContractType &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCreateDuplexChannelBadCallbackUserObject {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelBadCallbackUserObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This CreateChannel overload cannot be called on this instance of DuplexChannelFactory, as the DuplexChannelFactory was not initialized with an InstanceContext.  Please call the CreateChannel overload that takes an InstanceContext..
        /// </summary>
        internal static string SFxCreateDuplexChannelNoCallback {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelNoCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This CreateChannel overload cannot be called on this instance of DuplexChannelFactory, as the DuplexChannelFactory was initialized with a Type and no valid InstanceContext was provided.  Please call the CreateChannel overload that takes an InstanceContext..
        /// </summary>
        internal static string SFxCreateDuplexChannelNoCallback1 {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelNoCallback1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This CreateChannel overload cannot be called on this instance of DuplexChannelFactory, as the InstanceContext provided to the DuplexChannelFactory does not contain a valid UserObject..
        /// </summary>
        internal static string SFxCreateDuplexChannelNoCallbackUserObject {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelNoCallbackUserObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChannelFactory does not support the contract {0} as it defines a callback contract with one or more operations.  Please consider using DuplexChannelFactory instead of ChannelFactory..
        /// </summary>
        internal static string SFxCreateNonDuplexChannel1 {
            get {
                return ResourceManager.GetString("SFxCreateNonDuplexChannel1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CustomBinding on the ServiceEndpoint with contract &apos;{0}&apos; lacks a TransportBindingElement.  Every binding must have at least one binding element that derives from TransportBindingElement..
        /// </summary>
        internal static string SFxCustomBindingNeedsTransport1 {
            get {
                return ResourceManager.GetString("SFxCustomBindingNeedsTransport1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataContractSerializer does not support collection specified on element &apos;{0}&apos; .
        /// </summary>
        internal static string SFxDataContractSerializerDoesNotSupportBareArray {
            get {
                return ResourceManager.GetString("SFxDataContractSerializerDoesNotSupportBareArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid OperationFormatUse specified in the OperationFormatStyle of operation {0}, DataContractSerializer supports only Literal..
        /// </summary>
        internal static string SFxDataContractSerializerDoesNotSupportEncoded {
            get {
                return ResourceManager.GetString("SFxDataContractSerializerDoesNotSupportEncoded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The formatter threw an exception while trying to deserialize the message: {0}.
        /// </summary>
        internal static string SFxDeserializationFailed1 {
            get {
                return ResourceManager.GetString("SFxDeserializationFailed1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type or member named &apos;{0}&apos; could not be loaded because it has two incompatible attributes: &apos;{1}&apos; and &apos;{2}&apos;. To fix the problem, remove one of the attributes from the type or member..
        /// </summary>
        internal static string SFxDisallowedAttributeCombination {
            get {
                return ResourceManager.GetString("SFxDisallowedAttributeCombination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation &apos;{0}&apos;, cannot return null from methods that return Message..
        /// </summary>
        internal static string SFxDispatchRuntimeMessageCannotBeNull {
            get {
                return ResourceManager.GetString("SFxDispatchRuntimeMessageCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fault could not be loaded as the Use setting is Encoded and it references a schema definition using Element attribute. To fix the problem, change the Use setting to Literal..
        /// </summary>
        internal static string SFxDocEncodedFaultNotSupported {
            get {
                return ResourceManager.GetString("SFxDocEncodedFaultNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; could not be loaded as it uses an unsupported combination of Use and Style settings: Document with Encoded. To fix the problem, change the Use setting to Literal or change the Style setting to Rpc..
        /// </summary>
        internal static string SFxDocEncodedNotSupported {
            get {
                return ResourceManager.GetString("SFxDocEncodedNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;P class=&apos;intro&apos;&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;.
        /// </summary>
        internal static string SFxDocExt_CS {
            get {
                return ResourceManager.GetString("SFxDocExt_CS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service encountered an error..
        /// </summary>
        internal static string SFxDocExt_Error {
            get {
                return ResourceManager.GetString("SFxDocExt_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;client&apos; variable to call operations on the service..
        /// </summary>
        internal static string SFxDocExt_MainPageComment {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always close the client..
        /// </summary>
        internal static string SFxDocExt_MainPageComment2 {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageComment2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have created a service.&lt;P class=&apos;intro&apos;&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; .
        /// </summary>
        internal static string SFxDocExt_MainPageIntro1a {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntro1a", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have created a service.&lt;P class=&apos;intro&apos;&gt;To test this service, you will need to create a client and use it to call the service; however, metadata publishing via ?WSDL is currently disabled. This can be enabled via the service&apos;s configuration file. &lt;/P&gt;.
        /// </summary>
        internal static string SFxDocExt_MainPageIntro1b {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntro1b", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;.
        /// </summary>
        internal static string SFxDocExt_MainPageIntro2 {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntro2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can also access the service description as a single file:.
        /// </summary>
        internal static string SFxDocExt_MainPageIntroSingleWsdl {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntroSingleWsdl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} Service.
        /// </summary>
        internal static string SFxDocExt_MainPageTitle {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service.
        /// </summary>
        internal static string SFxDocExt_MainPageTitleNoServiceName {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageTitleNoServiceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: the service name must match the configuration name for the service implementation..
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment1 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the following endpoint. .
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment2 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: your service must have an http base address to add this endpoint..
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment3 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the following element to your service behavior configuration..
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment4 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a Windows&amp;#169; Communication Foundation service.&lt;BR/&gt;&lt;BR/&gt;&lt;B&gt;Metadata publishing for this service is currently disabled.&lt;/B&gt;&lt;BR/&gt;&lt;BR/&gt;If you have access to the service, you can enable metadata publishing by completing the following steps to modify your web or application configuration file:&lt;BR/&gt;&lt;BR/&gt;1. Create the following service behavior configuration, or add the &amp;lt;serviceMetadata&amp;gt; element to an existing service behavior configuration:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection1 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2. Add the behavior configuration to the service:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection2 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: the service name must match the configuration name for the service implementation.&lt;BR/&gt;&lt;BR/&gt;3. Add the following endpoint to your service configuration:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection3 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: your service must have an http base address to add this endpoint.&lt;BR/&gt;&lt;BR/&gt;The following is an example service configuration file with metadata publishing enabled:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection4 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For more information on publishing metadata please see the following documentation: &lt;a href=\&quot;http://go.microsoft.com/fwlink/?LinkId=65455\&quot;&gt;http://go.microsoft.com/fwlink/?LinkId=65455&lt;/a&gt;..
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection5 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;P class=&apos;intro&apos;&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;.
        /// </summary>
        internal static string SFxDocExt_VB {
            get {
                return ResourceManager.GetString("SFxDocExt_VB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message part {0} in namespace {1} appears more than once in Message..
        /// </summary>
        internal static string SFxDuplicateMessageParts {
            get {
                return ResourceManager.GetString("SFxDuplicateMessageParts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IEndpointBehavior &apos;{0}&apos; cannot be used on the server side; this behavior can only be applied to clients..
        /// </summary>
        internal static string SFXEndpointBehaviorUsedOnWrongSide {
            get {
                return ResourceManager.GetString("SFXEndpointBehaviorUsedOnWrongSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This EndpointDispatcher is not currently attached to the provided ChannelDispatcher..
        /// </summary>
        internal static string SFxEndpointDispatcherDifferentChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxEndpointDispatcherDifferentChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add EndpointDispatcher to more than one ChannelDispatcher..
        /// </summary>
        internal static string SFxEndpointDispatcherMultipleChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxEndpointDispatcherMultipleChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server returned an invalid SOAP Fault.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorDeserializingFault {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in deserializing one of the headers in message {0}.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorDeserializingHeader {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of reply message for operation &apos;{0}&apos;..
        /// </summary>
        internal static string SFxErrorDeserializingReplyBody {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingReplyBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of reply message for operation &apos;{0}&apos;. {1}.
        /// </summary>
        internal static string SFxErrorDeserializingReplyBodyMore {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingReplyBodyMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of request message for operation &apos;{0}&apos;..
        /// </summary>
        internal static string SFxErrorDeserializingRequestBody {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingRequestBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of request message for operation &apos;{0}&apos;. {1}.
        /// </summary>
        internal static string SFxErrorDeserializingRequestBodyMore {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingRequestBodyMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos; on method &apos;{1}&apos; in type &apos;{2}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectingOnMethod3 {
            get {
                return ResourceManager.GetString("SFxErrorReflectingOnMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos; on parameter {1} of method &apos;{2}&apos; in type &apos;{3}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectingOnParameter4 {
            get {
                return ResourceManager.GetString("SFxErrorReflectingOnParameter4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos; on type &apos;{1}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectingOnType2 {
            get {
                return ResourceManager.GetString("SFxErrorReflectingOnType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectionOnUnknown1 {
            get {
                return ResourceManager.GetString("SFxErrorReflectionOnUnknown1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in serializing body of message {0}: &apos;{1}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorSerializingBody {
            get {
                return ResourceManager.GetString("SFxErrorSerializingBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in serializing one of the headers in message {0}: &apos;{1}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorSerializingHeader {
            get {
                return ResourceManager.GetString("SFxErrorSerializingHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --- End of inner ExceptionDetail stack trace ---.
        /// </summary>
        internal static string SFxExceptionDetailEndOfInner {
            get {
                return ResourceManager.GetString("SFxExceptionDetailEndOfInner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ExceptionDetail, likely created by IncludeExceptionDetailInFaults=true, whose value is:.
        /// </summary>
        internal static string SFxExceptionDetailFormat {
            get {
                return ResourceManager.GetString("SFxExceptionDetailFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified ContractDescription could not be exported to WSDL because the Type property of the MessagePartDescription with name &apos;{1}&apos; in the OperationDescription with name &apos;{0}&apos; is not set.  The Type property must be set in order to create WSDL..
        /// </summary>
        internal static string SFxExportMustHaveType {
            get {
                return ResourceManager.GetString("SFxExportMustHaveType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fault named {0} in operation {1} cannot be imported. {2}.
        /// </summary>
        internal static string SFxFaultCannotBeImported {
            get {
                return ResourceManager.GetString("SFxFaultCannotBeImported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation {0}, more than one fault is declared with detail type {1}.
        /// </summary>
        internal static string SFxFaultContractDuplicateDetailType {
            get {
                return ResourceManager.GetString("SFxFaultContractDuplicateDetailType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation {0}, more than one fault is declared with element name {1} in namespace {2}.
        /// </summary>
        internal static string SFxFaultContractDuplicateElement {
            get {
                return ResourceManager.GetString("SFxFaultContractDuplicateElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: {1} (Fault Detail is equal to {2})..
        /// </summary>
        internal static string SFxFaultExceptionToString3 {
            get {
                return ResourceManager.GetString("SFxFaultExceptionToString3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The creator of this fault did not specify a Reason..
        /// </summary>
        internal static string SFxFaultReason {
            get {
                return ResourceManager.GetString("SFxFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation {0}, the schema type corresponding to the fault detail type {1} is anonymous. Please set Fault name explicitly to export anonymous types..
        /// </summary>
        internal static string SFxFaultTypeAnonymous {
            get {
                return ResourceManager.GetString("SFxFaultTypeAnonymous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a &apos;{0}&apos; using &apos;{1}&apos; or &apos;{2}&apos; is supported in this scenario..
        /// </summary>
        internal static string SFxGetChannelDispatcherDoesNotSupportScheme {
            get {
                return ResourceManager.GetString("SFxGetChannelDispatcherDoesNotSupportScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header name cannot be null or empty..
        /// </summary>
        internal static string SFXHeaderNameCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("SFXHeaderNameCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header name mismatch in member {1} of type {0}. The header name found in the description is {2}. The element name deduced by the formatter is {3}. This mismatch can happen if the ElementName specified in XmlElementAttribute or XmlArrayAttribute does not match the name specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the member name..
        /// </summary>
        internal static string SFxHeaderNameMismatchInMessageContract {
            get {
                return ResourceManager.GetString("SFxHeaderNameMismatchInMessageContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header name mismatch in operation {0} from contract {1}:{2}. The header name found in the description is {3}. The element name deduced by the formatter is {4}. This mismatch can happen if the ElementName specified in XmlElementAttribute or XmlArrayAttribute does not match the name specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the member name..
        /// </summary>
        internal static string SFxHeaderNameMismatchInOperation {
            get {
                return ResourceManager.GetString("SFxHeaderNameMismatchInOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header namespace mismatch in member {1} of type {0}. The header namespace found in the description is {2}. The element namespace deduced by the formatter is {3}. This mismatch can happen if the Namespace specified in XmlElementAttribute or XmlArrayAttribute does not match the namespace specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the contract namespace..
        /// </summary>
        internal static string SFxHeaderNamespaceMismatchInMessageContract {
            get {
                return ResourceManager.GetString("SFxHeaderNamespaceMismatchInMessageContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header namespace mismatch in operation {0} from contract {1}:{2}. The header namespace found in the description is {3}. The element namespace deduced by the formatter is {4}. This mismatch can happen if the Namespace specified in XmlElementAttribute or XmlArrayAttribute does not match the namespace specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the contract namespace..
        /// </summary>
        internal static string SFxHeaderNamespaceMismatchInOperation {
            get {
                return ResourceManager.GetString("SFxHeaderNamespaceMismatchInOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The header &apos;{0}&apos; from the namespace &apos;{1}&apos; was not understood by the recipient of this message, causing the message to not be processed.  This error typically indicates that the sender of this message has enabled a communication protocol that the receiver cannot process.  Please ensure that the configuration of the client&apos;s binding is consistent with the service&apos;s binding. .
        /// </summary>
        internal static string SFxHeaderNotUnderstood {
            get {
                return ResourceManager.GetString("SFxHeaderNotUnderstood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This value cannot be changed after the ChannelFactory has opened..
        /// </summary>
        internal static string SFxImmutableChannelFactoryBehavior0 {
            get {
                return ResourceManager.GetString("SFxImmutableChannelFactoryBehavior0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This value cannot be changed after the ServiceHost has opened..
        /// </summary>
        internal static string SFxImmutableServiceHostBehavior0 {
            get {
                return ResourceManager.GetString("SFxImmutableServiceHostBehavior0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation {0} binding {1} has extra part {2} that is not present in other bindings.
        /// </summary>
        internal static string SFxInconsistentBindingBodyParts {
            get {
                return ResourceManager.GetString("SFxInconsistentBindingBodyParts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Style {1} on header {0} does not match expected style {2}..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationStyleInHeader {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationStyleInHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All parts of message in operation {0} must either contain type or element. .
        /// </summary>
        internal static string SFxInconsistentWsdlOperationStyleInMessageParts {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationStyleInMessageParts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Style {1} inferred from messages in operation {0} does not match expected style {2} specified via bindings..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationStyleInOperationMessages {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationStyleInOperationMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bindings for operation {0} cannot specify different use and style values. Binding {1} specifies use {2} and style {3} while binding {4} specifies use {5} and style {6}..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseAndStyleInBinding {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseAndStyleInBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extensions for operation {0} in binding {1} cannot specify different use values..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseInBindingExtensions {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseInBindingExtensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fault bindings for operation {0} in binding {1} cannot specify different use values..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseInBindingFaults {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseInBindingFaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message bindings for operation {0} in binding {1} cannot specify different use values..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseInBindingMessages {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseInBindingMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AllowInitializationUI was set to false for this channel, but the channel is configured to use the &apos;{0}&apos; as an interactive initializer..
        /// </summary>
        internal static string SFxInitializationUIDisallowed {
            get {
                return ResourceManager.GetString("SFxInitializationUIDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel is configured to use interactive initializer &apos;{0}&apos;, but the channel was Opened without calling DisplayInitializationUI.  Call DisplayInitializationUI before calling Open or other methods on this channel..
        /// </summary>
        internal static string SFxInitializationUINotCalled {
            get {
                return ResourceManager.GetString("SFxInitializationUINotCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service implementation object invoked with wrong number of input parameters, operation expects {0} parameters but was called with {1} parameters..
        /// </summary>
        internal static string SFxInputParametersToServiceInvalid {
            get {
                return ResourceManager.GetString("SFxInputParametersToServiceInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service implementation object invoked with null input parameters, but operation expects {0} parameters..
        /// </summary>
        internal static string SFxInputParametersToServiceNull {
            get {
                return ResourceManager.GetString("SFxInputParametersToServiceNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InstanceContext has no provider for creating Service implementation objects..
        /// </summary>
        internal static string SFxInstanceNotInitialized {
            get {
                return ResourceManager.GetString("SFxInstanceNotInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This OperationContextScope is being disposed out of order..
        /// </summary>
        internal static string SFxInterleavedContextScopes0 {
            get {
                return ResourceManager.GetString("SFxInterleavedContextScopes0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client was unable to process the callback request due to an internal error.  For more information about the error, either turn on IncludeExceptionDetailInFaults (either from CallbackBehaviorAttribute or from the &lt;clientDebug&gt; configuration behavior) on the client in order to send the exception information back to the server, or turn on tracing as per the Microsoft .NET Framework SDK documentation and inspect the client trace logs..
        /// </summary>
        internal static string SFxInternalCallbackError {
            get {
                return ResourceManager.GetString("SFxInternalCallbackError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server was unable to process the request due to an internal error.  For more information about the error, either turn on IncludeExceptionDetailInFaults (either from ServiceBehaviorAttribute or from the &lt;serviceDebug&gt; configuration behavior) on the server in order to send the exception information back to the client, or turn on tracing as per the Microsoft .NET Framework SDK documentation and inspect the server trace logs..
        /// </summary>
        internal static string SFxInternalServerError {
            get {
                return ResourceManager.GetString("SFxInternalServerError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IAsyncResult&apos;s State must be the state argument passed to your Begin call..
        /// </summary>
        internal static string SFxInvalidAsyncResultState0 {
            get {
                return ResourceManager.GetString("SFxInvalidAsyncResultState0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallbackContract {0} is invalid because it is not an interface type..
        /// </summary>
        internal static string SFxInvalidCallbackContractType {
            get {
                return ResourceManager.GetString("SFxInvalidCallbackContractType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IAsyncResult not provided or of wrong type..
        /// </summary>
        internal static string SFxInvalidCallbackIAsyncResult {
            get {
                return ResourceManager.GetString("SFxInvalidCallbackIAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid IContextChannel passed to OperationContext. Must be either a server dispatching channel or a client proxy channel..
        /// </summary>
        internal static string SFxInvalidChannelToOperationContext {
            get {
                return ResourceManager.GetString("SFxInvalidChannelToOperationContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationFormatter encountered an invalid Message body. Expected to find node type &apos;Element&apos; with name &apos;{0}&apos; and namespace &apos;{1}&apos;. Found node type &apos;{2}&apos; with name &apos;{3}&apos; and namespace &apos;{4}&apos;.
        /// </summary>
        internal static string SFxInvalidMessageBody {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OperationFormatter could not deserialize any information from the Message because the Message is empty (IsEmpty = true)..
        /// </summary>
        internal static string SFxInvalidMessageBodyEmptyMessage {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while trying to deserialize parameter {0}:{1}.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxInvalidMessageBodyErrorDeserializingParameter {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while trying to deserialize parameter {0}:{1}. The InnerException message was &apos;{2}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxInvalidMessageBodyErrorDeserializingParameterMore {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while trying to serialize parameter {0}:{1}. The InnerException message was &apos;{2}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxInvalidMessageBodyErrorSerializingParameter {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyErrorSerializingParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation {0} either has a parameter or a return type that is attributed with MessageContractAttribute.  In order to represent the request message using a Message Contract, the operation must have a single parameter attributed with MessageContractAttribute.  In order to represent the response message using a Message Contract, the operation&apos;s return value must be a type that is attributed with MessageContractAttribute and the operation may not have any out or ref parameters..
        /// </summary>
        internal static string SFxInvalidMessageContractSignature {
            get {
                return ResourceManager.GetString("SFxInvalidMessageContractSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outgoing reply message for operation &apos;{0}&apos; specified Action=&apos;{1}&apos;, but contract for that operation specifies ReplyAction=&apos;{2}&apos;.    The Action specified in the Message must match the ReplyAction in the contract, or the operation contract must specify ReplyAction=&apos;*&apos;..
        /// </summary>
        internal static string SFxInvalidReplyAction {
            get {
                return ResourceManager.GetString("SFxInvalidReplyAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outgoing request message for operation &apos;{0}&apos; specified Action=&apos;{1}&apos;, but contract for that operation specifies Action=&apos;{2}&apos;.  The Action specified in the Message must match the Action in the contract, or the operation contract must specify Action=&apos;*&apos;..
        /// </summary>
        internal static string SFxInvalidRequestAction {
            get {
                return ResourceManager.GetString("SFxInvalidRequestAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The static CreateChannel method cannot be used with the contract {0} because that contract defines a callback contract.  Please try using one of the static CreateChannel overloads on DuplexChannelFactory&lt;TChannel&gt;..
        /// </summary>
        internal static string SFxInvalidStaticOverloadCalledForDuplexChannelFactory1 {
            get {
                return ResourceManager.GetString("SFxInvalidStaticOverloadCalledForDuplexChannelFactory1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For request in operation {0} to be a stream the operation must have a single parameter whose type is Stream..
        /// </summary>
        internal static string SFxInvalidStreamInRequest {
            get {
                return ResourceManager.GetString("SFxInvalidStreamInRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For response in operation {0} to be a stream the operation must have a single out parameter or return value whose type is Stream..
        /// </summary>
        internal static string SFxInvalidStreamInResponse {
            get {
                return ResourceManager.GetString("SFxInvalidStreamInResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to use Streams with the MessageContract programming model, the type {0} must have a single member with MessageBodyMember attribute and the member type must be Stream..
        /// </summary>
        internal static string SFxInvalidStreamInTypedMessage {
            get {
                return ResourceManager.GetString("SFxInvalidStreamInTypedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer size must be at least {0} bytes..
        /// </summary>
        internal static string SFxInvalidStreamOffsetLength {
            get {
                return ResourceManager.GetString("SFxInvalidStreamOffsetLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PrimitiveOperationFormatter was given a parameter or return type which it does not support..
        /// </summary>
        internal static string SFxInvalidUseOfPrimitiveOperationFormatter {
            get {
                return ResourceManager.GetString("SFxInvalidUseOfPrimitiveOperationFormatter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WSDL binding named {0} is not valid because no match for operation {1} was found in the corresponding portType definition..
        /// </summary>
        internal static string SFxInvalidWsdlBindingOpMismatch2 {
            get {
                return ResourceManager.GetString("SFxInvalidWsdlBindingOpMismatch2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WSDL binding named {0} is not valid because an operation binding doesn&apos;t have a name specified..
        /// </summary>
        internal static string SFxInvalidWsdlBindingOpNoName {
            get {
                return ResourceManager.GetString("SFxInvalidWsdlBindingOpNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlSerializer attribute {0} is not valid in {1}. Only XmlElement, XmlArray, XmlArrayItem and XmlAnyElement attributes are supported in MessageContract when IsWrapped is false..
        /// </summary>
        internal static string SFxInvalidXmlAttributeInBare {
            get {
                return ResourceManager.GetString("SFxInvalidXmlAttributeInBare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlSerializer attribute {0} is not valid in {1}. Only XmlElement, XmlArray, XmlArrayItem, XmlAnyAttribute and XmlAnyElement attributes are supported when IsWrapped is true..
        /// </summary>
        internal static string SFxInvalidXmlAttributeInWrapped {
            get {
                return ResourceManager.GetString("SFxInvalidXmlAttributeInWrapped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must contain either a single ServiceKnownTypeAttribute that refers to a method or a set of ServiceKnownTypeAttributes, each specifying a valid type.
        /// </summary>
        internal static string SFxKnownTypeAttributeInvalid1 {
            get {
                return ResourceManager.GetString("SFxKnownTypeAttributeInvalid1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type of method {1} in type {2} must be IEnumerable&lt;Type&gt; to be used by ServiceKnownTypeAttribute in {0}.
        /// </summary>
        internal static string SFxKnownTypeAttributeReturnType3 {
            get {
                return ResourceManager.GetString("SFxKnownTypeAttributeReturnType3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceKnownTypeAttribute in {0} refers to a method {1} that does not exist in type {2}.
        /// </summary>
        internal static string SFxKnownTypeAttributeUnknownMethod3 {
            get {
                return ResourceManager.GetString("SFxKnownTypeAttributeUnknownMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KnownType cannot be null in operation {0}.
        /// </summary>
        internal static string SFxKnownTypeNull {
            get {
                return ResourceManager.GetString("SFxKnownTypeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MaximumResolvedReferences property of MetadataExchangeClient must be greater than or equal to one.  &apos;{0}&apos; was specified..
        /// </summary>
        internal static string SFxMaximumResolvedReferencesOutOfRange {
            get {
                return ResourceManager.GetString("SFxMaximumResolvedReferencesOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {1} defines a MessageContract but also derives from a type {0} that does not define a MessageContract.  All of the objects in the inheritance hierarchy of {1} must defines a MessageContract..
        /// </summary>
        internal static string SFxMessageContractBaseTypeNotValid {
            get {
                return ResourceManager.GetString("SFxMessageContractBaseTypeNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message cannot be deserialized into MessageContract type {0} since it does not have a default (parameterless) constructor..
        /// </summary>
        internal static string SFxMessageContractRequiresDefaultConstructor {
            get {
                return ResourceManager.GetString("SFxMessageContractRequiresDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance of MessagePartDescription Name=&apos;{0}&apos; Namespace=&apos;{1}&apos; cannot be used in this context: required &apos;Type&apos; property was not set..
        /// </summary>
        internal static string SFxMessagePartDescriptionMissingType {
            get {
                return ResourceManager.GetString("SFxMessagePartDescriptionMissingType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient could not create an IChannelFactory for: address=&apos;{0}&apos;, dialect=&apos;{1}&apos;, and  identifier=&apos;{2}&apos;. .
        /// </summary>
        internal static string SFxMetadataExchangeClientCouldNotCreateChannelFactory {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientCouldNotCreateChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient instance could not be initialized because no Binding is available for scheme &apos;{0}&apos;. You can supply a Binding in the constructor, or specify a configurationName..
        /// </summary>
        internal static string SFxMetadataExchangeClientCouldNotCreateChannelFactoryBadScheme {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientCouldNotCreateChannelFactoryBadScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient could not create an HttpWebRequest for: address=&apos;{0}&apos;, dialect=&apos;{1}&apos;, and  identifier=&apos;{2}&apos;. .
        /// </summary>
        internal static string SFxMetadataExchangeClientCouldNotCreateWebRequest {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientCouldNotCreateWebRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient was not supplied with a MetadataReference or MetadataLocation from which to get metadata.  You must supply one to the constructor, to the GetMetadata method, or to the BeginGetMetadata method..
        /// </summary>
        internal static string SFxMetadataExchangeClientNoMetadataAddress {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientNoMetadataAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the Location property. The Location property must be a valid absolute or relative URI..
        /// </summary>
        internal static string SFxMetadataReferenceInvalidLocation {
            get {
                return ResourceManager.GetString("SFxMetadataReferenceInvalidLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} is not supported on this proxy, this can happen if the method is not marked with OperationContractAttribute or if the interface type is not marked with ServiceContractAttribute..
        /// </summary>
        internal static string SFxMethodNotSupported1 {
            get {
                return ResourceManager.GetString("SFxMethodNotSupported1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Callback method {0} is not supported, this can happen if the method is not marked with OperationContractAttribute or if its interface type is not the target of the ServiceContractAttribute&apos;s CallbackContract..
        /// </summary>
        internal static string SFxMethodNotSupportedOnCallback1 {
            get {
                return ResourceManager.GetString("SFxMethodNotSupportedOnCallback1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A DispatchOperation (or ClientOperation) can only be added to its parent DispatchRuntime (or ClientRuntime)..
        /// </summary>
        internal static string SFxMismatchedOperationParent {
            get {
                return ResourceManager.GetString("SFxMismatchedOperationParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Action header was found with namespace &apos;{0}&apos; for the given message..
        /// </summary>
        internal static string SFxMissingActionHeader {
            get {
                return ResourceManager.GetString("SFxMissingActionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback passed to operation &apos;{0}&apos; was called more than once.  This indicates an internal error in the implementation of that operation..
        /// </summary>
        internal static string SFxMultipleCallbackFromAsyncOperation {
            get {
                return ResourceManager.GetString("SFxMultipleCallbackFromAsyncOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling Post() on &apos;{0}&apos; resulted in multiple callbacks.  This indicates a problem in &apos;{0}&apos;..
        /// </summary>
        internal static string SFxMultipleCallbackFromSynchronizationContext {
            get {
                return ResourceManager.GetString("SFxMultipleCallbackFromSynchronizationContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ServiceContract has more the one operation with an Action of \&quot;*\&quot;.  A ServiceContract can have at most one operation an Action = \&quot;*\&quot;..
        /// </summary>
        internal static string SFxMultipleContractStarOperations0 {
            get {
                return ResourceManager.GetString("SFxMultipleContractStarOperations0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} in type {1} has more than one header part of type array of XmlElement..
        /// </summary>
        internal static string SFxMultipleUnknownHeaders {
            get {
                return ResourceManager.GetString("SFxMultipleUnknownHeaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property must be a non-empty string..
        /// </summary>
        internal static string SFxNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot handle invocation of {0} on interface {1} because the OperationSelector on ClientRuntime is null..
        /// </summary>
        internal static string SFxNeedProxyBehaviorOperationSelector2 {
            get {
                return ResourceManager.GetString("SFxNeedProxyBehaviorOperationSelector2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service type provided could not be loaded as a service because it does not have a default (parameter-less) constructor. To fix the problem, add a default constructor to the type, or pass an instance of the type to the host..
        /// </summary>
        internal static string SFxNoDefaultConstructor {
            get {
                return ResourceManager.GetString("SFxNoDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message with To &apos;{0}&apos; cannot be processed at the receiver, due to an AddressFilter mismatch at the EndpointDispatcher.  Check that the sender and receiver&apos;s EndpointAddresses agree..
        /// </summary>
        internal static string SFxNoEndpointMatchingAddress {
            get {
                return ResourceManager.GetString("SFxNoEndpointMatchingAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message with Action &apos;{0}&apos; cannot be processed at the receiver because this Action is reserved for the connection opening messages only and cannot be sent from client to server. To invoke this operation on the server, call the &apos;{1}&apos; method on the client proxy instead..
        /// </summary>
        internal static string SFxNoEndpointMatchingAddressForConnectionOpeningMessage {
            get {
                return ResourceManager.GetString("SFxNoEndpointMatchingAddressForConnectionOpeningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message with Action &apos;{0}&apos; cannot be processed at the receiver, due to a ContractFilter mismatch at the EndpointDispatcher. This may be because of either a contract mismatch (mismatched Actions between sender and receiver) or a binding/security mismatch between the sender and the receiver.  Check that sender and receiver have the same contract and the same binding (including security requirements, e.g. Message, Transport, None)..
        /// </summary>
        internal static string SFxNoEndpointMatchingContract {
            get {
                return ResourceManager.GetString("SFxNoEndpointMatchingContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract specified by type &apos;{0}&apos; is ambiguous.  The type derives from at least two different types that each define its own service contract.  For this type to be used as a contract type, exactly one of its inherited contracts must be more derived than any of the others..
        /// </summary>
        internal static string SFxNoMostDerivedContract {
            get {
                return ResourceManager.GetString("SFxNoMostDerivedContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-Addressing \&quot;none\&quot; value is not valid for the August 2004 version of WS-Addressing..
        /// </summary>
        internal static string SFxNone2004 {
            get {
                return ResourceManager.GetString("SFxNone2004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object that is not an exception was thrown..
        /// </summary>
        internal static string SFxNonExceptionThrown {
            get {
                return ResourceManager.GetString("SFxNonExceptionThrown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; cannot be the first operation to be called because IsInitiating is false..
        /// </summary>
        internal static string SFxNonInitiatingOperation1 {
            get {
                return ResourceManager.GetString("SFxNonInitiatingOperation1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service implementation object was not initialized or is not available..
        /// </summary>
        internal static string SFxNoServiceObject {
            get {
                return ResourceManager.GetString("SFxNoServiceObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no CLR type specified for parameter {0}, preventing the operation from being generated..
        /// </summary>
        internal static string SfxNoTypeSpecifiedForParameter {
            get {
                return ResourceManager.GetString("SfxNoTypeSpecifiedForParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formatter {0} returned a null reply message for call to operation &apos;{1}&apos;..
        /// </summary>
        internal static string SFxNullReplyFromFormatter2 {
            get {
                return ResourceManager.GetString("SFxNullReplyFromFormatter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message with action could not be processed because it is targeted at a request-reply operation, but cannot be replied to as the MessageId property is not set..
        /// </summary>
        internal static string SFxOneWayMessageToTwoWayMethod0 {
            get {
                return ResourceManager.GetString("SFxOneWayMessageToTwoWayMethod0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; has OperationContractAttribute, but enclosing type &apos;{1}&apos; does not have ServiceContractAttribute. OperationContractAttribute can only be used on methods in ServiceContractAttribute types or on their CallbackContract types..
        /// </summary>
        internal static string SFxOperationContractOnNonServiceContract {
            get {
                return ResourceManager.GetString("SFxOperationContractOnNonServiceContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{1}&apos; has {0}, but enclosing type &apos;{2}&apos; does not have ServiceContractAttribute. {0} can only be used on methods in ServiceContractAttribute types..
        /// </summary>
        internal static string SFxOperationContractProviderOnNonServiceContract {
            get {
                return ResourceManager.GetString("SFxOperationContractProviderOnNonServiceContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationDescription&apos;s Name must be a non-empty string..
        /// </summary>
        internal static string SFxOperationDescriptionNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxOperationDescriptionNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationDescription &apos;{0}&apos; is invalid because its Messages property contains an invalid number of MessageDescription instances. Each OperationDescription must have one or two messages..
        /// </summary>
        internal static string SFxOperationMustHaveOneOrTwoMessages {
            get {
                return ResourceManager.GetString("SFxOperationMustHaveOneOrTwoMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a mismatch between the number of supplied arguments and the number of expected arguments.  Specifically, the argument &apos;{0}&apos; has &apos;{1}&apos; elements while the argument &apos;{2}&apos; has &apos;{3}&apos; elements..
        /// </summary>
        internal static string SFxParameterCountMismatch {
            get {
                return ResourceManager.GetString("SFxParameterCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;parameters&apos; argument must be an array of one element..
        /// </summary>
        internal static string SFxParameterMustBeArrayOfOneElement {
            get {
                return ResourceManager.GetString("SFxParameterMustBeArrayOfOneElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;parameters&apos; argument must be an array that contains a single Message object..
        /// </summary>
        internal static string SFxParameterMustBeMessage {
            get {
                return ResourceManager.GetString("SFxParameterMustBeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All parameter names used in operations that make up a service contract must not be null..
        /// </summary>
        internal static string SFxParameterNameCannotBeNull {
            get {
                return ResourceManager.GetString("SFxParameterNameCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;parameters&apos; argument must be either null or an empty array..
        /// </summary>
        internal static string SFxParametersMustBeEmpty {
            get {
                return ResourceManager.GetString("SFxParametersMustBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message part name {0} is not unique in an RPC Message..
        /// </summary>
        internal static string SFxPartNameMustBeUniqueInRpc {
            get {
                return ResourceManager.GetString("SFxPartNameMustBeUniqueInRpc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation &apos;{0}&apos;, cannot pass null to methods that take Message as input parameter..
        /// </summary>
        internal static string SFxProxyRuntimeMessageCannotBeNull {
            get {
                return ResourceManager.GetString("SFxProxyRuntimeMessageCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply message was received for operation &apos;{0}&apos; with action &apos;{1}&apos;. However, your client code requires action &apos;{2}&apos;..
        /// </summary>
        internal static string SFxReplyActionMismatch3 {
            get {
                return ResourceManager.GetString("SFxReplyActionMismatch3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has FaultTo=&apos;{0}&apos; but IContextChannel.LocalAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress.  Enable ManualAddressing or avoid setting FaultTo on the message..
        /// </summary>
        internal static string SFxRequestHasInvalidFaultToOnClient {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidFaultToOnClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has ReplyTo=&apos;{0}&apos; but IContextChannel.LocalAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress.  Enable ManualAddressing or avoid setting ReplyTo on the message..
        /// </summary>
        internal static string SFxRequestHasInvalidReplyToOnClient {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidReplyToOnClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was received with a WS-Addressing ReplyTo or FaultTo header targeted at the \&quot;None\&quot; address.  These values are not valid for request-reply operations.  Please consider using a one-way operation or enabling ManualAddressing if you need to support ReplyTo or FaultTo values of \&quot;None.\&quot;.
        /// </summary>
        internal static string SFxRequestReplyNone {
            get {
                return ResourceManager.GetString("SFxRequestReplyNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This request operation did not receive a reply within the configured timeout ({0}).  The time allotted to this operation may have been a portion of a longer timeout.  This may be because the service is still processing the operation or because the service was unable to send a reply message.  Please consider increasing the operation timeout (by casting the channel/proxy to IContextChannel and setting the OperationTimeout property) and ensure that the service is able to connect to the client..
        /// </summary>
        internal static string SFxRequestTimedOut1 {
            get {
                return ResourceManager.GetString("SFxRequestTimedOut1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This request operation sent to {0} did not receive a reply within the configured timeout ({1}).  The time allotted to this operation may have been a portion of a longer timeout.  This may be because the service is still processing the operation or because the service was unable to send a reply message.  Please consider increasing the operation timeout (by casting the channel/proxy to IContextChannel and setting the OperationTimeout property) and ensure that the service is able to connect to the client..
        /// </summary>
        internal static string SFxRequestTimedOut2 {
            get {
                return ResourceManager.GetString("SFxRequestTimedOut2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient has resolved more than MaximumResolvedReferences..
        /// </summary>
        internal static string SFxResolvedMaxResolvedReferences {
            get {
                return ResourceManager.GetString("SFxResolvedMaxResolvedReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;result&apos; argument must be of type Message..
        /// </summary>
        internal static string SFxResultMustBeMessage {
            get {
                return ResourceManager.GetString("SFxResultMustBeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RPC Message {1} in operation {0} has an invalid body name {2}. It must be {3}.
        /// </summary>
        internal static string SFxRpcMessageBodyPartNameInvalid {
            get {
                return ResourceManager.GetString("SFxRpcMessageBodyPartNameInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem loading the XSD documents provided: a reference to a schema element with name &apos;{0}&apos; and namespace &apos;{1}&apos; could not be resolved because the element definition could not be found in the schema for targetNamespace &apos;{1}&apos;. Please check the XSD documents provided and try again..
        /// </summary>
        internal static string SFxSchemaDoesNotContainElement {
            get {
                return ResourceManager.GetString("SFxSchemaDoesNotContainElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem loading the XSD documents provided: a reference to a schema type with name &apos;{0}&apos; and namespace &apos;{1}&apos; could not be resolved because the type definition could not be found in the schema for targetNamespace &apos;{1}&apos;. Please check the XSD documents provided and try again..
        /// </summary>
        internal static string SFxSchemaDoesNotContainType {
            get {
                return ResourceManager.GetString("SFxSchemaDoesNotContainType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schema with target namespace &apos;{0}&apos; could not be found..
        /// </summary>
        internal static string SFxSchemaNotFound {
            get {
                return ResourceManager.GetString("SFxSchemaNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server did not provide a meaningful reply; this might be caused by a contract mismatch, a premature session shutdown or an internal server error..
        /// </summary>
        internal static string SFxServerDidNotReply {
            get {
                return ResourceManager.GetString("SFxServerDidNotReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be invoked because the property &apos;{1}&apos; on the OperationContract is set to &apos;{2}&apos;. To invoke this operation on the server, call the &apos;{3}&apos; method on the client proxy instead..
        /// </summary>
        internal static string SFxServiceChannelCannotBeCalledBecauseIsSessionOpenNotificationEnabled {
            get {
                return ResourceManager.GetString("SFxServiceChannelCannotBeCalledBecauseIsSessionOpenNotificationEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be completed because the sessionful channel timed out waiting to receive a message.  To increase the timeout, either set the receiveTimeout property on the binding in your configuration file, or set the ReceiveTimeout property on the Binding directly..
        /// </summary>
        internal static string SFxServiceChannelIdleAborted {
            get {
                return ResourceManager.GetString("SFxServiceChannelIdleAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property sets EnableFaults on the client. To set EnableFaults on the server, use ChannelDispatcher&apos;s EnableFaults..
        /// </summary>
        internal static string SFxSetEnableFaultsOnChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxSetEnableFaultsOnChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property sets ManualAddressing on the client. To set ManualAddressing on the server, use ChannelDispatcher&apos;s ManualAddressing..
        /// </summary>
        internal static string SFxSetManualAddresssingOnChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxSetManualAddresssingOnChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header properties cannot be set in MessageHeaderAttribute of {0} as its type is MessageHeader&lt;T&gt;..
        /// </summary>
        internal static string SFxStaticMessageHeaderPropertiesNotAllowed {
            get {
                return ResourceManager.GetString("SFxStaticMessageHeaderPropertiesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception has been thrown when reading the stream..
        /// </summary>
        internal static string SFxStreamIOException {
            get {
                return ResourceManager.GetString("SFxStreamIOException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message containing this stream has been closed. Note that request streams cannot be accessed after the service operation returns..
        /// </summary>
        internal static string SFxStreamRequestMessageClosed {
            get {
                return ResourceManager.GetString("SFxStreamRequestMessageClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message containing this stream has been closed. .
        /// </summary>
        internal static string SFxStreamResponseMessageClosed {
            get {
                return ResourceManager.GetString("SFxStreamResponseMessageClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout must be greater than or equal to TimeSpan.Zero. To disable timeout, specify TimeSpan.MaxValue..
        /// </summary>
        internal static string SFxTimeoutOutOfRange0 {
            get {
                return ResourceManager.GetString("SFxTimeoutOutOfRange0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeouts larger than Int32.MaxValue TotalMilliseconds (approximately 24 days) cannot be honored. To disable timeout, specify TimeSpan.MaxValue..
        /// </summary>
        internal static string SFxTimeoutOutOfRangeTooBig {
            get {
                return ResourceManager.GetString("SFxTimeoutOutOfRangeTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a unique part name for {0}..
        /// </summary>
        internal static string SFxTooManyPartsWithSameName {
            get {
                return ResourceManager.GetString("SFxTooManyPartsWithSameName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: The instance of the MessageContract cannot be null in {0}..
        /// </summary>
        internal static string SFxTypedMessageCannotBeNull {
            get {
                return ResourceManager.GetString("SFxTypedMessageCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be loaded because it specifies \&quot;rpc-style\&quot; in \&quot;literal\&quot; mode, but uses message contract types or the System.ServiceModel.Channels.Message. This combination is disallowed -- specify a different value for style or use parameters other than message contract types or System.ServiceModel.Channels.Message..
        /// </summary>
        internal static string SFxTypedMessageCannotBeRpcLiteral {
            get {
                return ResourceManager.GetString("SFxTypedMessageCannotBeRpcLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be loaded because it has a parameter or return type of type System.ServiceModel.Channels.Message or a type that has MessageContractAttribute and other parameters of different types. When using System.ServiceModel.Channels.Message or types with MessageContractAttribute, the method must not use any other types of parameters..
        /// </summary>
        internal static string SFxTypedOrUntypedMessageCannotBeMixedWithParameters {
            get {
                return ResourceManager.GetString("SFxTypedOrUntypedMessageCannotBeMixedWithParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using the rpc-encoded style, message contract types or the System.ServiceModel.Channels.Message type cannot be used if the operation has no parameters or has a void return value. Add a blank message contract type as a parameter or return type to operation &apos;{0}&apos;..
        /// </summary>
        internal static string SFxTypedOrUntypedMessageCannotBeMixedWithVoidInRpc {
            get {
                return ResourceManager.GetString("SFxTypedOrUntypedMessageCannotBeMixedWithVoidInRpc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This fault did not provide a matching translation: {0}.
        /// </summary>
        internal static string SFxUnknownFaultNoMatchingTranslation1 {
            get {
                return ResourceManager.GetString("SFxUnknownFaultNoMatchingTranslation1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This fault did not provide a reason (MessageFault.Reason was null)..
        /// </summary>
        internal static string SFxUnknownFaultNullReason0 {
            get {
                return ResourceManager.GetString("SFxUnknownFaultNullReason0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This fault did not provide a reason (MessageFault.Reason.Translations.Count was 0)..
        /// </summary>
        internal static string SFxUnknownFaultZeroReasons0 {
            get {
                return ResourceManager.GetString("SFxUnknownFaultZeroReasons0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter value &apos;{0}&apos; is an invalid URI..
        /// </summary>
        internal static string SFXUnvalidNamespaceParam {
            get {
                return ResourceManager.GetString("SFXUnvalidNamespaceParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value &apos;{0}&apos; provided for {1} property is an invalid URI..
        /// </summary>
        internal static string SFXUnvalidNamespaceValue {
            get {
                return ResourceManager.GetString("SFXUnvalidNamespaceValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; requires additional schema information that cannot be captured using the parameter mode. The specific attribute is &apos;{1}&apos;..
        /// </summary>
        internal static string SfxUseTypedMessageForCustomAttributes {
            get {
                return ResourceManager.GetString("SfxUseTypedMessageForCustomAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add outgoing headers to message as MessageVersion in OperationContext.Current &apos;{0}&apos; does not match with the header version of message being processed &apos;{1}&apos;..
        /// </summary>
        internal static string SFxVersionMismatchInOperationContextAndMessage2 {
            get {
                return ResourceManager.GetString("SFxVersionMismatchInOperationContextAndMessage2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrapper element name cannot be empty..
        /// </summary>
        internal static string SFxWrapperNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxWrapperNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrapper type for message {0} cannot be projected as a data contract type since it has multiple namespaces. Consider using the XmlSerializer.
        /// </summary>
        internal static string SFxWrapperTypeHasMultipleNamespaces {
            get {
                return ResourceManager.GetString("SFxWrapperTypeHasMultipleNamespaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service description message &apos;{1}&apos; from target namespace &apos;{2}&apos; does not contain part named &apos;{0}&apos;..
        /// </summary>
        internal static string SFxWsdlMessageDoesNotContainPart3 {
            get {
                return ResourceManager.GetString("SFxWsdlMessageDoesNotContainPart3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl operation {0} in portType {1} contains a fault that does not reference a message. This is either because the message attribute is missing or empty..
        /// </summary>
        internal static string SFxWsdlOperationFaultNeedsMessageAttribute2 {
            get {
                return ResourceManager.GetString("SFxWsdlOperationFaultNeedsMessageAttribute2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl operation input {0} in portType {1} does not reference a message. This is either because the message attribute is missing or empty..
        /// </summary>
        internal static string SFxWsdlOperationInputNeedsMessageAttribute2 {
            get {
                return ResourceManager.GetString("SFxWsdlOperationInputNeedsMessageAttribute2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl operation output {0} in portType {1} does not reference a message. This is either because the message attribute is missing or empty..
        /// </summary>
        internal static string SFxWsdlOperationOutputNeedsMessageAttribute2 {
            get {
                return ResourceManager.GetString("SFxWsdlOperationOutputNeedsMessageAttribute2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WSDL part {0} in message {1} from namespace {2} must have either an element or a type name.
        /// </summary>
        internal static string SFxWsdlPartMustHaveElementOrType {
            get {
                return ResourceManager.GetString("SFxWsdlPartMustHaveElementOrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlArrayAttribute cannot be used in repeating part {1}:{0}..
        /// </summary>
        internal static string SFxXmlArrayNotAllowedForMultiple {
            get {
                return ResourceManager.GetString("SFxXmlArrayNotAllowedForMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find XmlSerializer for type {0}..
        /// </summary>
        internal static string SFxXmlSerializerIsNotFound {
            get {
                return ResourceManager.GetString("SFxXmlSerializerIsNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be dispatched to the service at address &apos;{0}&apos;. Refer to the server Event Log for more details.
        /// </summary>
        internal static string Sharing_ConnectionDispatchFailed {
            get {
                return ResourceManager.GetString("Sharing_ConnectionDispatchFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be dispatched because the service at the endpoint address &apos;{0}&apos; is unavailable for the protocol of the address..
        /// </summary>
        internal static string Sharing_EndpointUnavailable {
            get {
                return ResourceManager.GetString("Sharing_EndpointUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured SecurityVersion does not support signature confirmation. Use WsSecurity11 or above..
        /// </summary>
        internal static string SignatureConfirmationNotSupported {
            get {
                return ResourceManager.GetString("SignatureConfirmationNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signing token {0} has no keys. The security token is used in a context that requires it to perform cryptographic operations, but the token contains no cryptographic keys. Either the token type does not support cryptographic operations, or the particular token instance does not contain cryptographic keys. Check your configuration to ensure that cryptographically disabled token types (for example, UserNameSecurityToken) are not specified in a context that requires cryptographic operations (for example, an [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SigningTokenHasNoKeys {
            get {
                return ResourceManager.GetString("SigningTokenHasNoKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signing token {0} has no key that supports the algorithm suite {1}..
        /// </summary>
        internal static string SigningTokenHasNoKeysSupportingTheAlgorithmSuite {
            get {
                return ResourceManager.GetString("SigningTokenHasNoKeysSupportingTheAlgorithmSuite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified size exceeds the remaining buffer space ({0} bytes)..
        /// </summary>
        internal static string SizeExceedsRemainingBufferSpace {
            get {
                return ResourceManager.GetString("SizeExceedsRemainingBufferSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soap11 ({0}).
        /// </summary>
        internal static string Soap11ToStringFormat {
            get {
                return ResourceManager.GetString("Soap11ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soap12 ({0}).
        /// </summary>
        internal static string Soap12ToStringFormat {
            get {
                return ResourceManager.GetString("Soap12ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket was aborted because an asynchronous receive from the socket did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SocketAbortedReceiveTimedOut {
            get {
                return ResourceManager.GetString("SocketAbortedReceiveTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection was aborted because an asynchronous send to the socket did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SocketAbortedSendTimedOut {
            get {
                return ResourceManager.GetString("SocketAbortedSendTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A graceful close was attempted on the socket, but the other side ({0}) is still sending data..
        /// </summary>
        internal static string SocketCloseReadReceivedData {
            get {
                return ResourceManager.GetString("SocketCloseReadReceivedData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint of the socket ({0}) did not respond to a close request within the allotted timeout ({1}). It is likely that the remote endpoint is not calling Close after receiving the EOF signal (null) from Receive. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SocketCloseReadTimeout {
            get {
                return ResourceManager.GetString("SocketCloseReadTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection has been disposed..
        /// </summary>
        internal static string SocketConnectionDisposed {
            get {
                return ResourceManager.GetString("SocketConnectionDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The space needed for encoding ({0} bytes) exceeds the message frame offset..
        /// </summary>
        internal static string SpaceNeededExceedsMessageFrameOffset {
            get {
                return ResourceManager.GetString("SpaceNeededExceedsMessageFrameOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The asynchronous result object used to end this operation was not the object that was returned when the operation was initiated..
        /// </summary>
        internal static string SPS_InvalidAsyncResult {
            get {
                return ResourceManager.GetString("SPS_InvalidAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seek is not supported on this stream..
        /// </summary>
        internal static string SPS_SeekNotSupported {
            get {
                return ResourceManager.GetString("SPS_SeekNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token Serializer cannot serialize &apos;{0}&apos;.  If this is a custom type you must supply a custom serializer..
        /// </summary>
        internal static string StandardsManagerCannotWriteObject {
            get {
                return ResourceManager.GetString("StandardsManagerCannotWriteObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeoutStream requires an inner Stream that supports timeouts; its CanTimeout property must be true..
        /// </summary>
        internal static string StreamDoesNotSupportTimeout {
            get {
                return ResourceManager.GetString("StreamDoesNotSupportTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while transmitting data..
        /// </summary>
        internal static string StreamError {
            get {
                return ResourceManager.GetString("StreamError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote server did not satisfy the mutual authentication requirement..
        /// </summary>
        internal static string StreamMutualAuthNotSatisfied {
            get {
                return ResourceManager.GetString("StreamMutualAuthNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The StreamUpgradeProvider {0} does not support the specified ChannelBindingKind ({1}). .
        /// </summary>
        internal static string StreamUpgradeUnsupportedChannelBindingKind {
            get {
                return ResourceManager.GetString("StreamUpgradeUnsupportedChannelBindingKind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StringNullOrEmpty.
        /// </summary>
        internal static string StringNullOrEmpty {
            get {
                return ResourceManager.GetString("StringNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The algorithm &apos;{0}&apos; is not accepted for operation &apos;{1}&apos; by algorithm suite {2}..
        /// </summary>
        internal static string SuiteDoesNotAcceptAlgorithm {
            get {
                return ResourceManager.GetString("SuiteDoesNotAcceptAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply message was received without a valid RelatesTo header.  This may have been caused by a missing RelatesTo header or a RelatesTo header with an invalid WS-Addressing Relationship type..
        /// </summary>
        internal static string SuppliedMessageIsNotAReplyItHasNoRelatesTo0 {
            get {
                return ResourceManager.GetString("SuppliedMessageIsNotAReplyItHasNoRelatesTo0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; addressing mode is not supported..
        /// </summary>
        internal static string SupportedAddressingModeNotSupported {
            get {
                return ResourceManager.GetString("SupportedAddressingModeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the symmetric key specified is too short ({0} bytes)..
        /// </summary>
        internal static string SymmetricKeyLengthTooShort {
            get {
                return ResourceManager.GetString("SymmetricKeyLengthTooShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SymmetricSecurityBindingElement cannot build a channel or listener factory. The ProtectionTokenParameters property is required but not set. Binding element configuration: {0}.
        /// </summary>
        internal static string SymmetricSecurityBindingElementNeedsProtectionTokenParameters {
            get {
                return ResourceManager.GetString("SymmetricSecurityBindingElementNeedsProtectionTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, any additional attributes must be declared on the synchronous OperationContract method. In this case, the asynchronous OperationContract method &apos;{2}&apos; has one or more attributes of type &apos;{5}&apos;. To fix it, remove the &apos;{5} [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_Attributes6 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_Attributes6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same number and types of parameters. In this case, some of the arguments are different. To fix it, ensure that the OperationContracts define the same number and types of argum [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_Parameters5 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_Parameters5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract  methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must have the same value for the &apos;{5}&apos; property. In this case, the values are different. To fix it, change the &apos;{5} property of one of the OperationContracts to match the other. Alternativel [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_Property6 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_Property6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same return type. In this case, the return types are different. To fix it, ensure that method &apos;{0}&apos; and method &apos;{3}&apos; have the same return type. Alternatively, changing the nam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_ReturnType5 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_ReturnType5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be added to the generic collection, because the collection has been parameterized with a different type..
        /// </summary>
        internal static string SynchronizedCollectionWrongType1 {
            get {
                return ResourceManager.GetString("SynchronizedCollectionWrongType1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null value cannot be added to the generic collection, because the collection has been parameterized with a value type..
        /// </summary>
        internal static string SynchronizedCollectionWrongTypeNull {
            get {
                return ResourceManager.GetString("SynchronizedCollectionWrongTypeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, any additional attributes must be declared on the synchronous OperationContract method. In this case, the task-based asynchronous OperationContract method &apos;{2}&apos; has one or more attributes of type &apos;{4}&apos;. To fix it, re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_Attributes6 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_Attributes6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, the two OperationContracts must define the same number and types of parameters. In this case, some of the arguments are different. To fix it, ensure that the OperationContracts define the same number and types of arg [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_Parameters5 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_Parameters5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract  method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, the two OperationContracts must have the same value for the &apos;{4}&apos; property. In this case, the values are different. To fix it, change the &apos;{4} property of one of the OperationContracts to match the other. Alternativ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_Property6 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_Property6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, the two OperationContracts must define the same return type. In this case, the return types are different. To fix it, ensure that method &apos;{0}&apos; and method &apos;{2}&apos; have the same return type. Alternatively, changing the n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_ReturnType5 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_ReturnType5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a task-based asynchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, any additional attributes must be declared on the task-based asynchronous OperationContract method. In this case, the asynchronous OperationContract method &apos;{2}&apos; has one or more attributes of ty [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_Attributes6 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_Attributes6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a task-based asynchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same number and types of parameters. In this case, some of the arguments are different. To fix it, ensure that the OperationContracts define the same n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_Parameters5 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_Parameters5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract  methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a task-based asynchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must have the same value for the &apos;{5}&apos; property. In this case, the values are different. To fix it, change the &apos;{5} property of one of the OperationContracts to match [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_Property6 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_Property6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same return type. In this case, the return types are different. To fix it, ensure that method &apos;{0}&apos; and method &apos;{3}&apos; have the same return type. Alternatively, chan [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_ReturnType5 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_ReturnType5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not connect to {0}. TCP error code {1}: {2}. .
        /// </summary>
        internal static string TcpConnectError {
            get {
                return ResourceManager.GetString("TcpConnectError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not connect to {0}. The connection attempt lasted for a time span of {3}. TCP error code {1}: {2}. .
        /// </summary>
        internal static string TcpConnectErrorWithTimeSpan {
            get {
                return ResourceManager.GetString("TcpConnectErrorWithTimeSpan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connecting to via {0} timed out after {1}. Connection attempts were made to {2} of {3} available addresses ({4}). Check the RemoteAddress of your channel and verify that the DNS records for this endpoint correspond to valid IP Addresses. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TcpConnectingToViaTimedOut {
            get {
                return ResourceManager.GetString("TcpConnectingToViaTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection was aborted. This could be caused by an error processing your message or a receive timeout being exceeded by the remote host, or an underlying network resource issue. Local socket timeout was &apos;{0}&apos;..
        /// </summary>
        internal static string TcpConnectionResetError {
            get {
                return ResourceManager.GetString("TcpConnectionResetError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket transfer timed out after {0}. You have exceeded the timeout set on your binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TcpConnectionTimedOut {
            get {
                return ResourceManager.GetString("TcpConnectionTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient winsock resources available to complete socket connection initiation..
        /// </summary>
        internal static string TcpConnectNoBufs {
            get {
                return ResourceManager.GetString("TcpConnectNoBufs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection was aborted by your local machine. This could be caused by a channel Abort(), or a transmission error from another thread using this socket..
        /// </summary>
        internal static string TcpLocalConnectionAborted {
            get {
                return ResourceManager.GetString("TcpLocalConnectionAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TCP error ({0}: {1}) occurred while transmitting data..
        /// </summary>
        internal static string TcpTransferError {
            get {
                return ResourceManager.GetString("TcpTransferError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceMetadataExtension instance could not be added to the ServiceHost instance because it has already been added to another ServiceHost instance..
        /// </summary>
        internal static string TheServiceMetadataExtensionInstanceCouldNot2_0 {
            get {
                return ResourceManager.GetString("TheServiceMetadataExtensionInstanceCouldNot2_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceMetadataExtension instance could not be removed from the ServiceHost instance because it has not been added to any ServiceHost instance..
        /// </summary>
        internal static string TheServiceMetadataExtensionInstanceCouldNot3_0 {
            get {
                return ResourceManager.GetString("TheServiceMetadataExtensionInstanceCouldNot3_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceMetadataExtension instance could not be removed from the ServiceHost instance because it has already been added to a different ServiceHost instance..
        /// </summary>
        internal static string TheServiceMetadataExtensionInstanceCouldNot4_0 {
            get {
                return ResourceManager.GetString("TheServiceMetadataExtensionInstanceCouldNot4_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The close operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnClose {
            get {
                return ResourceManager.GetString("TimeoutOnClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The open operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnOpen {
            get {
                return ResourceManager.GetString("TimeoutOnOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnOperation {
            get {
                return ResourceManager.GetString("TimeoutOnOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opening the channel timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutServiceChannelConcurrentOpen1 {
            get {
                return ResourceManager.GetString("TimeoutServiceChannelConcurrentOpen1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opening the {0} channel timed out after {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutServiceChannelConcurrentOpen2 {
            get {
                return ResourceManager.GetString("TimeoutServiceChannelConcurrentOpen2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeSpan must be greater than TimeSpan.Zero..
        /// </summary>
        internal static string TimeSpanMustbeGreaterThanTimeSpanZero {
            get {
                return ResourceManager.GetString("TimeSpanMustbeGreaterThanTimeSpanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is invalid because its creation time (&apos;{0}&apos;) is greater than or equal to its expiration time (&apos;{1}&apos;)..
        /// </summary>
        internal static string TimeStampHasCreationAheadOfExpiry {
            get {
                return ResourceManager.GetString("TimeStampHasCreationAheadOfExpiry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is invalid because its creation time (&apos;{0}&apos;) is in the future. Current time is &apos;{1}&apos; and allowed clock skew is &apos;{2}&apos;..
        /// </summary>
        internal static string TimeStampHasCreationTimeInFuture {
            get {
                return ResourceManager.GetString("TimeStampHasCreationTimeInFuture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is stale because its expiration time (&apos;{0}&apos;) is in the past. Current time is &apos;{1}&apos; and allowed clock skew is &apos;{2}&apos;..
        /// </summary>
        internal static string TimeStampHasExpiryTimeInPast {
            get {
                return ResourceManager.GetString("TimeStampHasExpiryTimeInPast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is stale because its creation time (&apos;{0}&apos;) is too far back in the past. Current time is &apos;{1}&apos;, maximum timestamp lifetime is &apos;{2}&apos; and allowed clock skew is &apos;{3}&apos;..
        /// </summary>
        internal static string TimeStampWasCreatedTooLongAgo {
            get {
                return ResourceManager.GetString("TimeStampWasCreatedTooLongAgo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token provider &apos;{0}&apos; does not support token cancellation..
        /// </summary>
        internal static string TokenCancellationNotSupported {
            get {
                return ResourceManager.GetString("TokenCancellationNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A symmetric crypto could not be created from token &apos;{0}&apos;..
        /// </summary>
        internal static string TokenCannotCreateSymmetricCrypto {
            get {
                return ResourceManager.GetString("TokenCannotCreateSymmetricCrypto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not support &apos;{1}&apos; creation..
        /// </summary>
        internal static string TokenDoesNotSupportKeyIdentifierClauseCreation {
            get {
                return ResourceManager.GetString("TokenDoesNotSupportKeyIdentifierClauseCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token provider &apos;{0}&apos; was unable to provide a security token..
        /// </summary>
        internal static string TokenProviderUnableToGetToken {
            get {
                return ResourceManager.GetString("TokenProviderUnableToGetToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token provider &apos;{0}&apos; was unable to renew the security token..
        /// </summary>
        internal static string TokenProviderUnableToRenewToken {
            get {
                return ResourceManager.GetString("TokenProviderUnableToRenewToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token provider &apos;{0}&apos; does not support token renewal..
        /// </summary>
        internal static string TokenRenewalNotSupported {
            get {
                return ResourceManager.GetString("TokenRenewalNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token requirement &apos;{0}&apos; does not specify the target address. This is required by the token manager for creating the corresponding security token provider..
        /// </summary>
        internal static string TokenRequirementDoesNotSpecifyTargetAddress {
            get {
                return ResourceManager.GetString("TokenRequirementDoesNotSpecifyTargetAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many attributes of type {0} on {1}..
        /// </summary>
        internal static string tooManyAttributesOfTypeOn2 {
            get {
                return ResourceManager.GetString("tooManyAttributesOfTypeOn2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given schema cannot be imported in this format..
        /// </summary>
        internal static string TraceCodeCannotBeImportedInCurrentFormat {
            get {
                return ResourceManager.GetString("TraceCodeCannotBeImportedInCurrentFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection has exceeded the idle timeout of this connection pool ({0}) and been closed..
        /// </summary>
        internal static string TraceCodeConnectionPoolIdleTimeoutReached {
            get {
                return ResourceManager.GetString("TraceCodeConnectionPoolIdleTimeoutReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection has exceeded the connection lease timeout of this connection pool ({0}) and been closed..
        /// </summary>
        internal static string TraceCodeConnectionPoolLeaseTimeoutReached {
            get {
                return ResourceManager.GetString("TraceCodeConnectionPoolLeaseTimeoutReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MaxOutboundConnectionsPerEndpoint quota ({0}) has been reached, so connection was closed and not stored in this connection pool..
        /// </summary>
        internal static string TraceCodeConnectionPoolMaxOutboundConnectionsPerEndpointQuotaReached {
            get {
                return ResourceManager.GetString("TraceCodeConnectionPoolMaxOutboundConnectionsPerEndpointQuotaReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient received a reply..
        /// </summary>
        internal static string TraceCodeMetadataExchangeClientReceiveReply {
            get {
                return ResourceManager.GetString("TraceCodeMetadataExchangeClientReceiveReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient is sending a request for metadata..
        /// </summary>
        internal static string TraceCodeMetadataExchangeClientSendRequest {
            get {
                return ResourceManager.GetString("TraceCodeMetadataExchangeClientSendRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure occured while performing a security related operation..
        /// </summary>
        internal static string TraceCodeSecurity {
            get {
                return ResourceManager.GetString("TraceCodeSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid TransactionFlowOption value..
        /// </summary>
        internal static string TransactionFlowBadOption {
            get {
                return ResourceManager.GetString("TransactionFlowBadOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to flow a transaction, flowing issued tokens must also be supported..
        /// </summary>
        internal static string TransactionFlowRequiredIssuedTokens {
            get {
                return ResourceManager.GetString("TransactionFlowRequiredIssuedTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transfer mode {0} is not supported by {1}..
        /// </summary>
        internal static string TransferModeNotSupported {
            get {
                return ResourceManager.GetString("TransferModeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In Binding &apos;{0}&apos;, TransportBindingElement &apos;{1}&apos; does not appear last in the BindingElementCollection.  Please change the order of elements such that the TransportBindingElement is last..
        /// </summary>
        internal static string TransportBindingElementMustBeLast {
            get {
                return ResourceManager.GetString("TransportBindingElementMustBeLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding does not contain a TransportBindingElement..
        /// </summary>
        internal static string TransportBindingElementNotFound {
            get {
                return ResourceManager.GetString("TransportBindingElementNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport configured on this binding does not appear to support the CompressionFormat specified ({0}) on the message encoder.  To resolve this issue, set the CompressionFormat on the {1} to &apos;{2}&apos; or use a different transport..
        /// </summary>
        internal static string TransportDoesNotSupportCompression {
            get {
                return ResourceManager.GetString("TransportDoesNotSupportCompression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create Attached or Unattached reference for &apos;{0}&apos;..
        /// </summary>
        internal static string TrustDriverIsUnableToCreatedNecessaryAttachedOrUnattachedReferences {
            get {
                return ResourceManager.GetString("TrustDriverIsUnableToCreatedNecessaryAttachedOrUnattachedReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured WS-Trust version does not support issued tokens. WS-Trust February 2005 or later is required..
        /// </summary>
        internal static string TrustDriverVersionDoesNotSupportIssuedTokens {
            get {
                return ResourceManager.GetString("TrustDriverVersionDoesNotSupportIssuedTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured Trust version does not support sessions. Use WSTrustFeb2005 or above..
        /// </summary>
        internal static string TrustDriverVersionDoesNotSupportSession {
            get {
                return ResourceManager.GetString("TrustDriverVersionDoesNotSupportSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not establish trust relationship for the SSL/TLS secure channel with authority &apos;{0}&apos;..
        /// </summary>
        internal static string TrustFailure {
            get {
                return ResourceManager.GetString("TrustFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create Key Type element for the Key Type &apos;{0}&apos;. This might be due to a wrong version of MessageSecurityVersion set on the SecurityBindingElement..
        /// </summary>
        internal static string UnableToCreateKeyTypeElementForUnknownKeyType {
            get {
                return ResourceManager.GetString("UnableToCreateKeyTypeElementForUnknownKeyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create token reference..
        /// </summary>
        internal static string UnableToCreateTokenReference {
            get {
                return ResourceManager.GetString("UnableToCreateTokenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy reference was ignored because the policy with ID &apos;{0}&apos; could not be found..
        /// </summary>
        internal static string UnableToFindPolicyWithId {
            get {
                return ResourceManager.GetString("UnableToFindPolicyWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following Policy Assertions were not Imported:\r\n.
        /// </summary>
        internal static string UnabletoImportPolicy {
            get {
                return ResourceManager.GetString("UnabletoImportPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot locate operation {0} in Contract {1}..
        /// </summary>
        internal static string UnableToLocateOperation2 {
            get {
                return ResourceManager.GetString("UnableToLocateOperation2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obtaining metadata from issuer &apos;{0}&apos; failed with error &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToObtainIssuerMetadata {
            get {
                return ResourceManager.GetString("UnableToObtainIssuerMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve the host name of URI \&quot;{0}\&quot; using DNS..
        /// </summary>
        internal static string UnableToResolveHost {
            get {
                return ResourceManager.GetString("UnableToResolveHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve KeyInfo for unwrapping key: KeyInfo &apos;{0}&apos;, available tokens &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToResolveKeyInfoForUnwrappingToken {
            get {
                return ResourceManager.GetString("UnableToResolveKeyInfoForUnwrappingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token resolver is unable to resolve the security key reference &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToResolveKeyReference {
            get {
                return ResourceManager.GetString("UnableToResolveKeyReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token resolver is unable to resolve the token reference &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToResolveTokenReference {
            get {
                return ResourceManager.GetString("UnableToResolveTokenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemoryStream&apos;s internal buffer cannot be accessed..
        /// </summary>
        internal static string UnauthorizedAccess_MemStreamBuffer {
            get {
                return ResourceManager.GetString("UnauthorizedAccess_MemStreamBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unbound prefix used in qualified name &apos;{0}&apos;..
        /// </summary>
        internal static string UnboundPrefixInQName {
            get {
                return ResourceManager.GetString("UnboundPrefixInQName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected binary secret of type {0} but got secret of type {1}..
        /// </summary>
        internal static string UnexpectedBinarySecretType {
            get {
                return ResourceManager.GetString("UnexpectedBinarySecretType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; from namespace &apos;{1}&apos; is not expected to appear more than once.
        /// </summary>
        internal static string UnexpectedDuplicateElement {
            get {
                return ResourceManager.GetString("UnexpectedDuplicateElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; from namespace &apos;{1}&apos; is not expected. Expecting element &apos;{2}&apos; from namespace &apos;{3}&apos;.
        /// </summary>
        internal static string UnexpectedElementExpectingElement {
            get {
                return ResourceManager.GetString("UnexpectedElementExpectingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; from the &apos;{1}&apos; namespace is empty and does not specify a valid identity claim. .
        /// </summary>
        internal static string UnexpectedEmptyElementExpectingClaim {
            get {
                return ResourceManager.GetString("UnexpectedEmptyElementExpectingClaim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected end of file..
        /// </summary>
        internal static string UnexpectedEndOfFile {
            get {
                return ResourceManager.GetString("UnexpectedEndOfFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote server returned an unexpected response: ({0}) {1}..
        /// </summary>
        internal static string UnexpectedHttpResponseCode {
            get {
                return ResourceManager.GetString("UnexpectedHttpResponseCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML child node {0} of type {1} is unexpected for element {2}..
        /// </summary>
        internal static string UnexpectedXmlChildNode {
            get {
                return ResourceManager.GetString("UnexpectedXmlChildNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to    XPath:{0}\r\n  Assertions:.
        /// </summary>
        internal static string UnImportedAssertionList {
            get {
                return ResourceManager.GetString("UnImportedAssertionList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The computed key algorithm &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnknownComputedKeyAlgorithm {
            get {
                return ResourceManager.GetString("UnknownComputedKeyAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized encoding occurred while reading the binary security token..
        /// </summary>
        internal static string UnknownEncodingInBinarySecurityToken {
            get {
                return ResourceManager.GetString("UnknownEncodingInBinarySecurityToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The listener at Uri &apos;{0}&apos; could not be initialized because it was created for an unrecognized channel type..
        /// </summary>
        internal static string UnknownListenerType1 {
            get {
                return ResourceManager.GetString("UnknownListenerType1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecognized WSDL extension of Type &apos;{0}&apos; was not handled..
        /// </summary>
        internal static string UnknownWSDLExtensionIgnored {
            get {
                return ResourceManager.GetString("UnknownWSDLExtensionIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ClaimType &apos;{0}&apos; is not recognized. Expected ClaimType &apos;{1}&apos;..
        /// </summary>
        internal static string UnrecognizedClaimTypeForIdentity {
            get {
                return ResourceManager.GetString("UnrecognizedClaimTypeForIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized identity property type: &apos;{0}&apos;..
        /// </summary>
        internal static string UnrecognizedIdentityPropertyType {
            get {
                return ResourceManager.GetString("UnrecognizedIdentityPropertyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized identity type Name=&apos;{0}&apos;, Namespace=&apos;{1}&apos;..
        /// </summary>
        internal static string UnrecognizedIdentityType {
            get {
                return ResourceManager.GetString("UnrecognizedIdentityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The \&quot;{0}\&quot; namespace is not a recognized WS-Policy namespace..
        /// </summary>
        internal static string UnrecognizedPolicyDocumentNamespace {
            get {
                return ResourceManager.GetString("UnrecognizedPolicyDocumentNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized policy element {0} in namespace {1}..
        /// </summary>
        internal static string UnrecognizedPolicyElementInNamespace {
            get {
                return ResourceManager.GetString("UnrecognizedPolicyElementInNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binary encoding {0} is not supported..
        /// </summary>
        internal static string UnsupportedBinaryEncoding {
            get {
                return ResourceManager.GetString("UnsupportedBinaryEncoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; binding element does not support cloning..
        /// </summary>
        internal static string UnsupportedBindingElementClone {
            get {
                return ResourceManager.GetString("UnsupportedBindingElementClone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{1}&apos; is not supported in this context for the binding property &apos;{0}&apos;..
        /// </summary>
        internal static string UnsupportedBindingProperty {
            get {
                return ResourceManager.GetString("UnsupportedBindingProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import the policy. The value of the attribute &apos;{0}&apos; must be either &apos;true&apos;, &apos;false&apos;, &apos;1&apos; or &apos;0&apos;. The following error occurred: &apos;{1}&apos;..
        /// </summary>
        internal static string UnsupportedBooleanAttribute {
            get {
                return ResourceManager.GetString("UnsupportedBooleanAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} binding element requires envelope version &apos;{1}&apos; It doesn&apos;t support &apos;{2}&apos;..
        /// </summary>
        internal static string UnsupportedEnvelopeVersion {
            get {
                return ResourceManager.GetString("UnsupportedEnvelopeVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issuer entropy is not BinarySecretSecurityToken or WrappedKeySecurityToken..
        /// </summary>
        internal static string UnsupportedIssuerEntropyType {
            get {
                return ResourceManager.GetString("UnsupportedIssuerEntropyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key derivation algorithm &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnsupportedKeyDerivationAlgorithm {
            get {
                return ResourceManager.GetString("UnsupportedKeyDerivationAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; username token has an unsupported password type..
        /// </summary>
        internal static string UnsupportedPasswordType {
            get {
                return ResourceManager.GetString("UnsupportedPasswordType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \&quot;{0}\&quot; is not a supported WS-Policy document root element..
        /// </summary>
        internal static string UnsupportedPolicyDocumentRoot {
            get {
                return ResourceManager.GetString("UnsupportedPolicyDocumentRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import the security policy. The protection requirements for the secure conversation bootstrap binding are not supported. Protection requirements for the secure conversation bootstrap must require both the request and the response to be signed and encrypted..
        /// </summary>
        internal static string UnsupportedSecureConversationBootstrapProtectionRequirements {
            get {
                return ResourceManager.GetString("UnsupportedSecureConversationBootstrapProtectionRequirements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unsupported security policy assertion was detected during the security policy import: {0}.
        /// </summary>
        internal static string UnsupportedSecurityPolicyAssertion {
            get {
                return ResourceManager.GetString("UnsupportedSecurityPolicyAssertion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{1}&apos; is not supported in this context for the binding security property &apos;{0}&apos;..
        /// </summary>
        internal static string UnsupportedSecuritySetting {
            get {
                return ResourceManager.GetString("UnsupportedSecuritySetting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protection level &apos;{0}&apos; was specified, yet SSL transport security only supports EncryptAndSign..
        /// </summary>
        internal static string UnsupportedSslProtectionLevel {
            get {
                return ResourceManager.GetString("UnsupportedSslProtectionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{1}&apos; for the &apos;{0}&apos; property is not supported in Windows Store apps..
        /// </summary>
        internal static string UnsupportedTokenImpersonationLevel {
            get {
                return ResourceManager.GetString("UnsupportedTokenImpersonationLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The StreamUpgradeAcceptor specified ({0}) is not supported by this IStreamUpgradeChannelBindingProvider  implementation.  The most likely cause of this is passing a StreamUpgradeAcceptor that was not created by the StreamUpgradeProvider associated with this IStreamUpgradeChannelBindingProvider  implementation..
        /// </summary>
        internal static string UnsupportedUpgradeAcceptor {
            get {
                return ResourceManager.GetString("UnsupportedUpgradeAcceptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The StreamUpgradeInitiator specified ({0}) is not supported by this IStreamUpgradeChannelBindingProvider  implementation.  The most likely cause of this is passing a StreamUpgradeInitiator that was not created by the StreamUpgradeProvider associated with the current IStreamUpgradeChannelBindingProvider  implementation..
        /// </summary>
        internal static string UnsupportedUpgradeInitiator {
            get {
                return ResourceManager.GetString("UnsupportedUpgradeInitiator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported WSDL, only one message part is supported for fault messages. This fault message references zero or more than one message part. If you have edit access to the WSDL file, you can fix the problem by removing the extra message parts such that fault message references just one part..
        /// </summary>
        internal static string UnsupportedWSDLOnlyOneMessage {
            get {
                return ResourceManager.GetString("UnsupportedWSDLOnlyOneMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported WSDL, the fault message part must reference an element. This fault message does not reference an element. If you have edit access to the WSDL document, you can fix the problem by referencing a schema element using the &apos;element&apos; attribute..
        /// </summary>
        internal static string UnsupportedWSDLTheFault {
            get {
                return ResourceManager.GetString("UnsupportedWSDLTheFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The scheme parameter must not be empty..
        /// </summary>
        internal static string UriGeneratorSchemeMustNotBeEmpty {
            get {
                return ResourceManager.GetString("UriGeneratorSchemeMustNotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given URI must be absolute..
        /// </summary>
        internal static string UriMustBeAbsolute {
            get {
                return ResourceManager.GetString("UriMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The username cannot be empty..
        /// </summary>
        internal static string UserNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("UserNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The username is not provided. Specify username in ClientCredentials..
        /// </summary>
        internal static string UserNamePasswordNotProvidedOnClientCredentials {
            get {
                return ResourceManager.GetString("UserNamePasswordNotProvidedOnClientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must be greater than 0..
        /// </summary>
        internal static string ValueMustBeGreaterThanZero {
            get {
                return ResourceManager.GetString("ValueMustBeGreaterThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must fall within the range {0} to {1}..
        /// </summary>
        internal static string ValueMustBeInRange {
            get {
                return ResourceManager.GetString("ValueMustBeInRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must be non-negative..
        /// </summary>
        internal static string ValueMustBeNonNegative {
            get {
                return ResourceManager.GetString("ValueMustBeNonNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must be positive..
        /// </summary>
        internal static string ValueMustBePositive {
            get {
                return ResourceManager.GetString("ValueMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WaitForMessage timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WaitForMessageTimedOut {
            get {
                return ResourceManager.GetString("WaitForMessageTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Similar ServiceEndpoints were exported. The WSDL export process was forced to suffix wsdl:binding names to avoid naming conflicts.\r\n Similar ServiceEndpoints means different binding instances having the Name: {0} and Namespace: {1} and either the same ContractDescription or at least the same contract Name: {2}..
        /// </summary>
        internal static string WarnDuplicateBindingQNameNameOnExport {
            get {
                return ResourceManager.GetString("WarnDuplicateBindingQNameNameOnExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was skipped during export because the property &apos;{0}&apos; is set to &apos;{1}&apos;. This operation should be used for server only and should not be exposed from WSDL. \r\nContract Name:{2}\r\nContract Namespace:{3}\r\nOperation Name:{4}.
        /// </summary>
        internal static string WarnSkippingOpertationWithSessionOpenNotificationEnabled {
            get {
                return ResourceManager.GetString("WarnSkippingOpertationWithSessionOpenNotificationEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was skipped during export because it has a wildcard action. This is not supported in WSDL.\r\nContract Name:{0}\r\nContract Namespace:{1}\r\nOperation Name:{2}.
        /// </summary>
        internal static string WarnSkippingOpertationWithWildcardAction {
            get {
                return ResourceManager.GetString("WarnSkippingOpertationWithWildcardAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HttpChannelFactory cannot create the channel with shape &apos;{0}&apos; when the {1} of {2} was set as &apos;{3}&apos;..
        /// </summary>
        internal static string WebSocketCannotCreateRequestClientChannelWithCertainWebSocketTransportUsage {
            get {
                return ResourceManager.GetString("WebSocketCannotCreateRequestClientChannelWithCertainWebSocketTransportUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value specified (&apos;{0}&apos;) contains more than one subprotocol which is not supported..
        /// </summary>
        internal static string WebSocketInvalidProtocolContainsMultipleSubProtocolString {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolContainsMultipleSubProtocolString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty string is not a valid subprotocol value. Please use \&quot;null\&quot; to specify no value..
        /// </summary>
        internal static string WebSocketInvalidProtocolEmptySubprotocolString {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolEmptySubprotocolString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subprotocol &apos;{0}&apos; is invalid because it contains the invalid character &apos;{1}&apos;..
        /// </summary>
        internal static string WebSocketInvalidProtocolInvalidCharInProtocolString {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolInvalidCharInProtocolString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; operation timed out after &apos;{1}&apos;. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WebSocketOperationTimedOut {
            get {
                return ResourceManager.GetString("WebSocketOperationTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Receive operation timed out after &apos;{0}&apos;. For duplex sessionful channels, the receive timeout is also the idle timeout for the channel, so consider setting a suitably large value for the ReceiveTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WebSocketReceiveTimedOut {
            get {
                return ResourceManager.GetString("WebSocketReceiveTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Send operation timed out after &apos;{0}&apos;. Increase the SendTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WebSocketSendTimedOut {
            get {
                return ResourceManager.GetString("WebSocketSendTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot write to the stream because the end of the stream marker was already written..
        /// </summary>
        internal static string WebSocketStreamWriteCalledAfterEOMSent {
            get {
                return ResourceManager.GetString("WebSocketStreamWriteCalledAfterEOMSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server didn&apos;t accept the connection request. It is possible that the WebSocket subprotocol sent by your client is not supported by the server. Protocol(s) supported by the server are &apos;{0}&apos;..
        /// </summary>
        internal static string WebSocketSubProtocolMismatchFromServer {
            get {
                return ResourceManager.GetString("WebSocketSubProtocolMismatchFromServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the policy being imported for contract &apos;{0}:{1}&apos; is invalid:&apos;{2}&apos;. It should be either &apos;{3}&apos;, &apos;{4}&apos; or &apos;{5}&apos;..
        /// </summary>
        internal static string WebSocketTransportPolicyAssertionInvalid {
            get {
                return ResourceManager.GetString("WebSocketTransportPolicyAssertionInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected WebSocket close message received when receiving a message..
        /// </summary>
        internal static string WebSocketUnexpectedCloseMessageError {
            get {
                return ResourceManager.GetString("WebSocketUnexpectedCloseMessageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server didn&apos;t accept the connection request. It is possible that the WebSocket protocol version on your client doesn&apos;t match the one on the server(&apos;{0}&apos;)..
        /// </summary>
        internal static string WebSocketVersionMismatchFromServer {
            get {
                return ResourceManager.GetString("WebSocketVersionMismatchFromServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WMI GetObject Query: {0}.
        /// </summary>
        internal static string WmiGetObject {
            get {
                return ResourceManager.GetString("WmiGetObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WMI PutInstance Class: {0}.
        /// </summary>
        internal static string WmiPutInstance {
            get {
                return ResourceManager.GetString("WmiPutInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous call to this WsdlExporter left it in a faulted state. It is no longer usable..
        /// </summary>
        internal static string WsdlExporterIsFaulted {
            get {
                return ResourceManager.GetString("WsdlExporterIsFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A WSDL import extension threw an exception during the BeforeImport call: {0}\r\nError: {1}.
        /// </summary>
        internal static string WsdlExtensionBeforeImportError {
            get {
                return ResourceManager.GetString("WsdlExtensionBeforeImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a WSDL export extension: {0}\r\n contract: {1}.
        /// </summary>
        internal static string WsdlExtensionContractExportError {
            get {
                return ResourceManager.GetString("WsdlExtensionContractExportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a WSDL export extension: {0}\r\n Endpoint: {1}.
        /// </summary>
        internal static string WsdlExtensionEndpointExportError {
            get {
                return ResourceManager.GetString("WsdlExtensionEndpointExportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown while running a WSDL import extension: {0}\r\nError: {1}.
        /// </summary>
        internal static string WsdlExtensionImportError {
            get {
                return ResourceManager.GetString("WsdlExtensionImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ContractDescription argument to ImportEndpoints must be contained in the KnownContracts collection..
        /// </summary>
        internal static string WsdlImporterContractMustBeInKnownContracts {
            get {
                return ResourceManager.GetString("WsdlImporterContractMustBeInKnownContracts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous call to this WsdlImporter left it in a faulted state. It is no longer usable..
        /// </summary>
        internal static string WsdlImporterIsFaulted {
            get {
                return ResourceManager.GetString("WsdlImporterIsFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error importing a {0} that the {1} is dependent on.\r\nXPath to {0}: {2}.
        /// </summary>
        internal static string WsdlImportErrorDependencyDetail {
            get {
                return ResourceManager.GetString("WsdlImportErrorDependencyDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import {0}\r\nDetail: {2}\r\nXPath to Error Source: {1}.
        /// </summary>
        internal static string WsdlImportErrorMessageDetail {
            get {
                return ResourceManager.GetString("WsdlImportErrorMessageDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous attempt to import this {0} already failed..
        /// </summary>
        internal static string WsdlItemAlreadyFaulted {
            get {
                return ResourceManager.GetString("WsdlItemAlreadyFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the WSHttpBinding does not support reliable sessions over transport security (HTTPS). The channel factory or service host could not be opened. Use message security for secure reliable messaging over HTTP..
        /// </summary>
        internal static string WSHttpDoesNotSupportRMWithHttps {
            get {
                return ResourceManager.GetString("WSHttpDoesNotSupportRMWithHttps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The X.509 certificate {0} chain building failed. The certificate that was used has a trust chain that cannot be verified. Replace the certificate or change the certificateValidationMode. {1}.
        /// </summary>
        internal static string X509ChainBuildFail {
            get {
                return ResourceManager.GetString("X509ChainBuildFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find &apos;{0}&apos; value in dictionary string..
        /// </summary>
        internal static string XDCannotFindValueInDictionaryString {
            get {
                return ResourceManager.GetString("XDCannotFindValueInDictionaryString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred. The XML buffer is not in the correct state to perform the operation..
        /// </summary>
        internal static string XmlBufferInInvalidState {
            get {
                return ResourceManager.GetString("XmlBufferInInvalidState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size necessary to buffer the XML content exceeded the buffer quota..
        /// </summary>
        internal static string XmlBufferQuotaExceeded {
            get {
                return ResourceManager.GetString("XmlBufferQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cdata &apos;{0}&apos;.
        /// </summary>
        internal static string XmlFoundCData {
            get {
                return ResourceManager.GetString("XmlFoundCData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to comment &apos;{0}&apos;.
        /// </summary>
        internal static string XmlFoundComment {
            get {
                return ResourceManager.GetString("XmlFoundComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to element &apos;{0}&apos; from namespace &apos;{1}&apos;.
        /// </summary>
        internal static string XmlFoundElement {
            get {
                return ResourceManager.GetString("XmlFoundElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to end element &apos;{0}&apos; from namespace &apos;{1}&apos;.
        /// </summary>
        internal static string XmlFoundEndElement {
            get {
                return ResourceManager.GetString("XmlFoundEndElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to end of file.
        /// </summary>
        internal static string XmlFoundEndOfFile {
            get {
                return ResourceManager.GetString("XmlFoundEndOfFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to node {0}.
        /// </summary>
        internal static string XmlFoundNodeType {
            get {
                return ResourceManager.GetString("XmlFoundNodeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to text &apos;{0}&apos;.
        /// </summary>
        internal static string XmlFoundText {
            get {
                return ResourceManager.GetString("XmlFoundText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; cannot be parsed as the type &apos;{1}&apos;..
        /// </summary>
        internal static string XmlInvalidConversion {
            get {
                return ResourceManager.GetString("XmlInvalidConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream returned by OperationStreamProvider cannot be null..
        /// </summary>
        internal static string XmlInvalidStream {
            get {
                return ResourceManager.GetString("XmlInvalidStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required xml:lang attribute value is missing..
        /// </summary>
        internal static string XmlLangAttributeMissing {
            get {
                return ResourceManager.GetString("XmlLangAttributeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line {0}, position {1}..
        /// </summary>
        internal static string XmlLineInfo {
            get {
                return ResourceManager.GetString("XmlLineInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start element expected. Found {0}..
        /// </summary>
        internal static string XmlStartElementExpected {
            get {
                return ResourceManager.GetString("XmlStartElementExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPath:{0}.
        /// </summary>
        internal static string XPathPointer {
            get {
                return ResourceManager.GetString("XPathPointer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \&quot;XPath Unavailable\&quot;.
        /// </summary>
        internal static string XPathUnavailable {
            get {
                return ResourceManager.GetString("XPathUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing required &apos;{0}&apos; attribute..
        /// </summary>
        internal static string XsdMissingRequiredAttribute1 {
            get {
                return ResourceManager.GetString("XsdMissingRequiredAttribute1", resourceCulture);
            }
        }
    }
